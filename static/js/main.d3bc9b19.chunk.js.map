{"version":3,"sources":["hack/gates/gateclass.ts","hack/guis/hardware-simulator/actions.tsx","hack/guis/hardware-simulator/hdl-viewer.tsx","hack/guis/hardware-simulator/pins.tsx","hack/guis/hardware-simulator/status-message.tsx","hack/hdl/tokenizer.ts","hack/hdl/parser.ts","hack/gates/gate.ts","hack/gates/builtin-gate.ts","hack/gates/builtins/logic.ts","hack/gates/builtins/arithmetic.ts","hack/gates/builtins/memory.ts","hack/gates/builtins/computer.ts","hack/gates/builtins/index.ts","hack/gates/node.ts","hack/gates/builtin-gateclass.ts","hack/gates/connection.ts","hack/gates/composite-gate.ts","hack/gates/composite-gateclass.ts","hack/gates/index.ts","hack/simulators/hardware-simulator.ts","hack/controller/script/tokenizer.ts","hack/guis/hardware-simulator/test-script.tsx","hack/controller/script/index.ts","hack/controller/controller.ts","hack/guis/hardware-simulator/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PinType","GateClass","name","inputPinsInfo","outputPinsInfo","namesToTypes","namesToNumbers","isClocked","isInputClocked","isOutputClocked","this","registerPins","INPUT","OUTPUT","pinType","pinNumber","length","pinName","UNKNOWN","pinInfos","type","forEach","pinInfo","i","registerPin","Actions","hdlFilename","setHDLFileName","userWorkspace","setUserWorkspace","testScript","setTestScript","singleStep","fastForward","stop","restart","setFormat","setWorkingDirectory","useCallback","e","a","files","target","Error","newUserWorkspace","Map","file","endsWith","firstHDLFile","text","set","scripts","Array","from","keys","filter","hdls","className","webkitdirectory","directory","mozdirectory","onChange","value","undefined","map","filename","onClick","HDLViewer","hdl","Pins","title","pinData","updatePin","format","number","data","displayValue","int","parseInt","toString","formatValue","StatusMessage","status","TokenType","HDLError","HDLTokenizer","input","readpos","pos","cur","keywords","token","literal","CHIP","IN","OUT","PARTS","BUILTIN","CLOCKED","true","TRUE","false","FALSE","readChar","EOF","skipWhitespaceAndComments","LBRACE","RBRACE","LPAREN","RPAREN","LBRACKET","RBRACKET","EQUAL","COMMA","DOT","COLON","SEMICOLON","isLetter","ident","readIdentifier","lookupIdentifier","isDigit","INT","readNumber","message","fail","IDENTIFIER","substring","inSlashComment","inStarComment","peek","peekChar","char","n","charCodeAt","HDLParser","advance","tokenIs","failMessage","peekTokenIs","types","includes","Gate","inputPins","outputPins","gateClass","getPinType","index","getPinNumber","doEval","clockUp","clockDown","reCompute","BuiltInGate","Not","_in","get","Not16","And","b","Xor","gates","Or","Mux","sel","Mux4Way16","c","d","out","Mux8Way16","f","g","h","DMux","DMux4Way","DMux8Way","Or8Way","HalfAdder","FullAdder","sum","Add16","Inc16","ALU","x","y","result","Bit","state","Register","PC","load","inc","RAM","size","values","Uint16Array","address","RAM8","RAM64","RAM512","RAM4K","RAM16K","Screen","Keyboard","key","ROM32K","SIZE","builtins","Nand","gate","DFF","logic","And16","Or16","Mux16","arithmetic","memory","computer","Node","connections","node","Set","add","delete","SubNode","low","high","mask","shiftRight","getMask","SubBusListeningAdapter","shiftLeft","masked1","masked2","POWERS_OF_2","bitHolder","ConnectionType","BuiltInGateClass","parser","tsClassName","expectPeek","clockedPins","readPinsInfo","inputFound","outputFound","j","inputNodes","_","outputNodes","CompositeGate","internalPins","parts","eval","tick","tock","INTERNAL","CompositeGateClass","userDefinedParts","partsList","internalPinsInfo","readParts","subNode","partClass","newInstance","internalNodes","internalConnections","partNode","gateSubBus","partSubBus","connection","partNumber","getNode","partPinName","FROM_INPUT","connectGateToPart","gatePinNumber","TO_OUTPUT","TO_INTERNAL","connect","FROM_INTERNAL","FROM_TRUE","FROM_FALSE","source","sourceNode","sourceSubBus","targetNode","targetSubBus","endOfParts","hasMoreTokens","partName","getGateClass","push","readPinNames","endOfPins","leftName","leftSubBus","readSubBus","rightPinPossibilities","expectPeekOneOf","rightName","rightSubBus","addConnection","partGateClass","leftType","rightPinInfo","leftNumber","leftPinInfo","getPinInfo","leftWidth","width","rightType","rightNumber","selfFittingWidth","connectionType","INVALID","rightWidth","hdlFileName","has","getGateClassHDL","getGateClassBuiltIn","tokenizer","expectCurrent","gateName","readHDL","exit","pinWidth","HardwareSimulator","setGateFilename","time","performTock","performTick","varName","decimalForm","toParse","radix","startsWith","toDecimalForm","numValue","command","commandName","loadGate","slice","setValue","performEval","TestScript","script","currentLine","lines","split","line","classes","ScriptError","ScriptTokenizer","lineNumber","REPEAT","OUTPUT_FILE","COMPARE_TO","OUTPUT_LIST","CommandCode","TerminatorType","VariableFormat","padL","padR","len","Command","code","arg","args","terminator","Script","commands","lineNumbers","buildScript","maxArgs","repeatOpen","createRepeatCommand","createOutputFileCommand","createCompareToCommand","createOutputListCommand","createOutputCommand","readArgs","SIMULATOR","REPEAT_END","SINGLE_STEP","MINI_STEP","END","count","vars","percentPos","indexOf","charAt","dotPos1","dotPos2","HackController","simulator","displayMessage","setTestScriptLine","currentCommandIndex","loopCommandIndex","varList","output","outputLinesCounter","compare","compareLinesCounter","comparisonFailed","comparisonFailureLine","fastForwardRunning","fastForwardInterval","m","scriptName","setInputPin","terminatorType","miniStep","setInterval","clearInterval","resetOutput","resetCompare","redo","getCommandAt","doCommand","getArg","doOutputListCommand","doOutputCommand","nextCommand","getValue","padStart","repeat","outputAndCompare","space","leftSpace","Math","floor","rightSpace","compareLine","trim","HardwareSimulatorUI","useState","gateFilename","testScriptLine","internal","setPinData","setStatus","controller","useRef","updatePinData","current","getGate","getPinData","useEffect","error","loadScript","updateInputPin","displayScript","id","compositeGate","compositeClass","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d3bc9b19.chunk.js","sourcesContent":["import { Gate } from \"./gate\"\n\nexport enum PinType {\n    INPUT = \"INPUT\",\n    OUTPUT = \"OUTPUT\",\n    INTERNAL = \"INTERNAL\",\n    UNKNOWN = \"UNKNOWN\"\n}\n\nexport type PinInfo = {\n    name: string\n    width: number\n}\n\nexport abstract class GateClass {\n    namesToTypes: { [_: string]: PinType }\n    namesToNumbers: { [_: string]: number }\n\n    name: string\n\n    inputPinsInfo: PinInfo[]\n    outputPinsInfo: PinInfo[]\n\n    isClocked: boolean\n    isInputClocked: boolean[]\n    isOutputClocked: boolean[]\n\n    constructor(name: string, inputPinsInfo: PinInfo[], outputPinsInfo: PinInfo[]) {\n        this.name = name\n        this.namesToTypes = {}\n        this.namesToNumbers = {}\n\n        this.inputPinsInfo = inputPinsInfo\n        this.registerPins(inputPinsInfo, PinType.INPUT)\n        this.outputPinsInfo = outputPinsInfo\n        this.registerPins(outputPinsInfo, PinType.OUTPUT)\n\n        this.isClocked = false\n        this.isInputClocked = []\n        this.isOutputClocked = []\n    }\n\n    abstract newInstance(): Gate\n\n    getPinInfo(pinType: PinType, pinNumber: number): PinInfo | null {\n        switch (pinType) {\n            case PinType.INPUT:\n                if (pinNumber < this.inputPinsInfo.length) {\n                return this.inputPinsInfo[pinNumber]\n            }\n            break\n            case PinType.OUTPUT:\n                if (pinNumber < this.outputPinsInfo.length) {\n                return this.outputPinsInfo[pinNumber]\n            }\n            break\n        }\n        return null\n    }\n\n    getPinType(pinName: string): PinType {\n        return this.namesToTypes[pinName] ?? PinType.UNKNOWN\n    }\n\n    getPinNumber(pinName: string): number {\n        return this.namesToNumbers[pinName] ?? -1\n    }\n\n    registerPins(pinInfos: PinInfo[], type: PinType) {\n        pinInfos.forEach((pinInfo, i) => {\n            this.registerPin(pinInfo, type, i)\n        })\n    }\n\n    registerPin(pinInfo: PinInfo, type: PinType, pinNumber: number) {\n        this.namesToTypes[pinInfo.name] = type\n        this.namesToNumbers[pinInfo.name] = pinNumber\n    }\n}\n","import { AriaAttributes, ChangeEvent, DOMAttributes, useCallback } from \"react\"\nimport { UserWorkspace } from \"../../gates/composite-gateclass\"\n\nexport type ActionsProps = {\n  hdlFilename: string | null\n  setHDLFileName: (_: string | null) => void\n  userWorkspace: UserWorkspace | null\n  setUserWorkspace: (_: UserWorkspace | null) => void\n  testScript: string | null\n  setTestScript: (_: string | null) => void\n  singleStep: () => void\n  fastForward: () => void\n  stop: () => void\n  restart: () => void\n  setFormat: (_: string) => void\n}\n\nexport function Actions({ hdlFilename, setHDLFileName, userWorkspace, setUserWorkspace, testScript, setTestScript, singleStep, fastForward, stop, restart, setFormat }: ActionsProps) {\n  // TODO: make a better approach\n  const setWorkingDirectory = useCallback(async (e: ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files\n    if (!files) {\n      throw new Error(\"no files found\")\n    }\n    let newUserWorkspace = new Map<string, string>()\n    let firstHDLFile\n    for (let i=0; i<files.length; i++) {\n      const file = files[i]\n      if (file.name.endsWith(\".hdl\") && !firstHDLFile) {\n        firstHDLFile = file\n      }\n      newUserWorkspace.set(file.name, await file.text())\n    }\n    setUserWorkspace(newUserWorkspace)\n    if (firstHDLFile) {\n      setHDLFileName(firstHDLFile.name)\n    }\n  }, [setHDLFileName, setUserWorkspace])\n\n  const scripts = Array.from(userWorkspace?.keys() ?? [])\n    .filter((file) => file.endsWith(\".tst\"))\n  const hdls = Array.from(userWorkspace?.keys() ?? [])\n    .filter((file) => file.endsWith(\".hdl\"))\n\n  return (\n    <div className=\"actions\">\n      <input type=\"file\" webkitdirectory=\"\" directory=\"\" mozdirectory=\"\" onChange={setWorkingDirectory} />\n      <select value={hdlFilename ?? undefined} onChange={(e) => setHDLFileName(e.target.value)}>\n        {hdls.map((filename) => (<option key={filename} value={filename}>{filename}</option>))}\n      </select>\n      <select value={testScript ?? undefined} onChange={(e) => setTestScript(e.target.value)}>\n        {scripts.map((filename) => (<option key={filename} value={filename}>{filename}</option>))}\n      </select>\n      <select onChange={(e) => setFormat(e.target.value)}>\n        <option key=\"decimal\" value=\"decimal\">Decimal</option>\n        <option key=\"binary\" value=\"binary\">Binary</option>\n        <option key=\"hexadecimal\" value=\"hexadecimal\">Hexadecimal</option>\n      </select>\n      <button onClick={singleStep}>Single Step</button>\n      <button onClick={fastForward}>Run</button>\n      <button onClick={stop}>Stop</button>\n      <button onClick={restart}>Reset</button>\n    </div>\n  )\n}\n\ndeclare module \"react\" {\n  interface HTMLAttributes<T> extends AriaAttributes, DOMAttributes<T> {\n    directory?: string\n    webkitdirectory?: string\n    mozdirectory?: string\n  }\n}\n","export type HDLViewerProps = {\n  hdl: string | null\n}\n\nexport function HDLViewer({ hdl }: HDLViewerProps) {\n  return (<div className=\"hdlViewer\"><pre>{hdl}</pre></div>)\n}\n","import { useCallback } from \"react\"\nimport { PinData, PinUpdate } from \".\"\nimport { PinType } from \"../../gates/gateclass\"\n\nexport type PinsProps = {\n  title: string\n  type: PinType\n  pinData: PinData[]\n  updatePin: (data: PinUpdate) => void\n  format: string\n}\n\nexport function Pins({ title, type, pinData, updatePin, format }: PinsProps) {\n  const onChange = useCallback((value: string, number: number, type: PinType) => {\n    updatePin({ value, number, type })\n  }, [updatePin])\n\n  return (\n    <div className=\"pins\">\n      <h3>{title}</h3>\n      <table>\n        <tbody>\n          {pinData.map((data, i) => {\n            const { name, value } = data\n            const displayValue = type === PinType.INPUT ? value : formatValue(value, format)\n            return (<tr key={i}>\n                    <td>{name}</td>\n                    <td><input value={displayValue} onChange={(e) => onChange(e.target.value, i, type)} /></td>\n                    </tr>)\n          })}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport function formatValue(value: string, format: string): string {\n  const int = parseInt(value) ?? 0\n  switch (format) {\n    case \"binary\":\n      return int.toString(2)\n    case \"hexadecimal\":\n      return int.toString(16)\n    default:\n      return int.toString()\n  }\n}\n","export type StatusMessageProps = {\n  status: string | null\n}\n\nexport function StatusMessage({ status }: StatusMessageProps) {\n  return (<div className=\"statusMessage\">{status}</div>)\n}\n","export enum TokenType {\n  IDENTIFIER = 'IDENTIFIER',\n\n  TRUE = 'true',\n  FALSE = 'false',\n  CHIP = 'CHIP',\n  IN = 'IN',\n  OUT = 'OUT',\n  PARTS = 'PARTS',\n  BUILTIN = 'BUILTIN',\n  CLOCKED = 'CLOCKED',\n\n  INT = 'INT',\n  LBRACE = 'LBRACE',\n  RBRACE = 'RBRACE',\n  LBRACKET = 'LBRACKET',\n  RBRACKET = 'RBRACKET',\n  LPAREN = 'LPAREN',\n  RPAREN = 'RPAREN',\n  COLON = 'COLON',\n  EQUAL = 'EQUAL',\n  COMMA = 'COMMA',\n  SEMICOLON = 'SEMICOLON',\n  DOT = 'DOT',\n  INVALID = 'INVALID',\n\n  EOF = 'EOF',\n}\n\nexport class HDLError extends Error {}\n\nexport type Token = {\n  type: TokenType | null\n  literal: string | null\n}\n\nexport class HDLTokenizer {\n  private input: string\n  private readpos: number\n  private pos: number\n  private cur: string\n  private keywords: { [_: string]: TokenType }\n\n  // current token\n  token: Token = { type: null, literal: null }\n\n  constructor (input: string) {\n    this.input = input\n    this.readpos = 0\n    this.pos = 0\n    this.cur = ''\n    this.keywords = {\n      CHIP: TokenType.CHIP,\n      IN: TokenType.IN,\n      OUT: TokenType.OUT,\n      PARTS: TokenType.PARTS,\n      BUILTIN: TokenType.BUILTIN,\n      CLOCKED: TokenType.CLOCKED,\n      true: TokenType.TRUE,\n      false: TokenType.FALSE\n    }\n\n    this.readChar()\n  }\n\n  hasMoreTokens (): boolean {\n    return this.token.type !== TokenType.EOF\n  }\n\n  advance () {\n    this.skipWhitespaceAndComments()\n\n    this.token.literal = this.cur\n    switch (this.cur) {\n      case '{':\n        this.token.type = TokenType.LBRACE\n        break\n      case '}':\n        this.token.type = TokenType.RBRACE\n        break\n      case '(':\n        this.token.type = TokenType.LPAREN\n        break\n      case ')':\n        this.token.type = TokenType.RPAREN\n        break\n      case '[':\n        this.token.type = TokenType.LBRACKET\n        break\n      case ']':\n        this.token.type = TokenType.RBRACKET\n        break\n      case '=':\n        this.token.type = TokenType.EQUAL\n        break\n      case ',':\n        this.token.type = TokenType.COMMA\n        break\n      case '.':\n        this.token.type = TokenType.DOT\n        break\n      case ':':\n        this.token.type = TokenType.COLON\n        break\n      case ';':\n        this.token.type = TokenType.SEMICOLON\n        break\n      case '':\n        this.token.type = TokenType.EOF\n        break\n      default:\n        if (isLetter(this.cur)) {\n          const ident = this.readIdentifier()\n          this.token.type = this.lookupIdentifier(ident)\n          this.token.literal = ident\n          return\n        } else if (isDigit(this.cur)) {\n          this.token.type = TokenType.INT\n          this.token.literal = this.readNumber()\n          return\n        }\n    }\n\n    this.readChar()\n  }\n\n  fail (message: string): never {\n    HDLTokenizer.fail(message)\n  }\n\n  static fail (message: string): never {\n    throw new HDLError(message)\n  }\n\n  private lookupIdentifier (ident: string): TokenType {\n    return this.keywords[ident] ?? TokenType.IDENTIFIER\n  }\n\n  private readIdentifier (): string {\n    const pos = this.pos\n    while (isLetter(this.cur) || isDigit(this.cur)) {\n      this.readChar()\n    }\n    return this.input.substring(pos, this.pos)\n  }\n\n  private readNumber (): string {\n    const pos = this.pos\n    while (isDigit(this.cur)) {\n      this.readChar()\n    }\n    return this.input.substring(pos, this.pos)\n  }\n\n  private readChar () {\n    this.cur = this.readpos >= this.input.length ? '' : this.input[this.readpos]\n    this.pos = this.readpos\n    this.readpos++\n  }\n\n  private peekChar () {\n    return this.readpos >= this.input.length ? '' : this.input[this.readpos]\n  }\n\n  private skipWhitespaceAndComments () {\n    let inSlashComment = false\n    let inStarComment = false\n\n    while (true) {\n      const peek = this.peekChar()\n\n      // isSlashCommentStart\n      if (this.cur === '/' && peek === '/') {\n        inSlashComment = true\n        this.readChar() // read peek as well\n        // isSlashCommentEnd\n      } else if (inSlashComment && this.cur === '\\n') {\n        inSlashComment = false\n        // isStarCommentStart\n      } else if (this.cur === '/' && peek === '*') {\n        inStarComment = true\n        this.readChar() // read peek as well\n        // isStarCommentEnd\n      } else if (inStarComment && (this.cur === '*' && peek === '/')) {\n        inStarComment = false\n        this.readChar() // read peek as well\n      } else if (!inSlashComment && !inStarComment && !(this.cur === ' ' || this.cur === '\\t' ||\n                                                        this.cur === '\\n' || this.cur === '\\r')) {\n        return\n      }\n\n      this.readChar()\n    }\n  }\n}\n\nfunction isLetter (char: string): boolean {\n  const n = char.charCodeAt(0)\n  return (n >= 65 && n < 91) || (n >= 97 && n < 123)\n}\n\nfunction isDigit (char: string): boolean {\n  const n = char.charCodeAt(0)\n  return (n >= 48 && n < 58)\n}\n\n","import { HDLTokenizer, Token, TokenType } from \"./tokenizer\";\n\nexport class HDLParser {\n  private input: HDLTokenizer\n\n  token: Token = { literal: null, type: null }\n  peek: Token = { literal: null, type: null }\n\n  constructor(input: HDLTokenizer) {\n    this.input = input\n    this.advance()\n    this.advance()\n  }\n\n  advance () {\n    this.token = {...this.peek}\n    this.input.advance()\n    this.peek = {...this.input.token}\n  }\n\n  hasMoreTokens (): boolean {\n    return !this.tokenIs(TokenType.EOF)\n  }\n\n  tokenIs (type: TokenType): boolean {\n    return this.token.type === type\n  }\n\n  peekTokenIs (type: TokenType): boolean {\n    return this.peek.type === type\n  }\n\n  expectCurrent (type: TokenType, failMessage: string) {\n    if (!this.tokenIs(type)) {\n      this.fail(failMessage)\n    }\n  }\n\n  expectPeek (type: TokenType, failMessage: string): void | never {\n    if (this.peekTokenIs(type)) {\n      this.advance()\n    } else {\n      this.fail(failMessage)\n    }\n  }\n\n  expectPeekOneOf (types: TokenType[], failMessage: string): void | never {\n    if (this.peek.type && types.includes(this.peek.type)) {\n      this.advance()\n    } else {\n      this.fail(failMessage)\n    }\n  }\n\n  fail (message: string): never {\n    this.input.fail(message)\n  }\n\n  static fail (message: string): never {\n    HDLTokenizer.fail(message)\n  }\n}\n","import { GateClass, PinType } from \"./gateclass\"\nimport { Node } from \"./node\"\n\nexport abstract class Gate {\n    gateClass: GateClass\n    inputPins: Node[]\n    outputPins: Node[]\n\n    constructor(inputPins: Node[], outputPins: Node[], gateClass: GateClass) {\n        this.inputPins = inputPins\n        this.outputPins = outputPins\n        this.gateClass = gateClass\n    }\n\n    abstract reCompute(): void\n    abstract clockUp(): void\n    abstract clockDown(): void\n\n    getNode(name: string): Node | null {\n        const type = this.gateClass.getPinType(name)\n        const index = this.gateClass.getPinNumber(name)\n        switch (type) {\n            case PinType.INPUT:\n                return this.inputPins[index]\n            case PinType.OUTPUT:\n                return this.outputPins[index]\n        }\n        return null\n    }\n\n    tick() {\n        this.doEval()\n        this.clockUp()\n    }\n\n    tock() {\n        this.clockDown()\n        this.doEval()\n    }\n\n    eval() {\n        this.doEval()\n    }\n\n    doEval() {\n        this.reCompute()\n    }\n}\n\n","import { Gate } from \"./gate\";\n\nexport class BuiltInGate extends Gate {\n    reCompute() {}\n    clockUp() {}\n    clockDown() {}\n}\n","import { BuiltInGate } from \"./../builtin-gate\"\n\nexport class Not extends BuiltInGate {\n    reCompute() {\n        const _in = this.inputPins[0].get()\n        this.outputPins[0].set(1 - _in)\n    }\n}\n\nexport class Not16 extends BuiltInGate {\n    reCompute() {\n        const _in = this.inputPins[0].get()\n        this.outputPins[0].set(~_in)\n    }\n}\n\nexport class And extends BuiltInGate {\n    reCompute() {\n        const a = this.inputPins[0].get()\n        const b = this.inputPins[1].get()\n        this.outputPins[0].set(a & b)\n    }\n}\n\nexport class Xor extends BuiltInGate {\n    reCompute() {\n        const a = this.inputPins[0].get()\n        const b = this.inputPins[1].get()\n        this.outputPins[0].set(a ^ b)\n    }\n}\n\nexport class Or extends BuiltInGate {\n    reCompute() {\n        const a = this.inputPins[0].get()\n        const b = this.inputPins[1].get()\n        this.outputPins[0].set(a | b)\n    }\n}\n\nexport class Mux extends BuiltInGate {\n    reCompute() {\n        const a = this.inputPins[0].get()\n        const b = this.inputPins[1].get()\n        const sel = this.inputPins[2].get()\n        this.outputPins[0].set(sel === 0 ? a : b)\n    }\n}\n\nexport class Mux4Way16 extends BuiltInGate {\n    reCompute() {\n        const a = this.inputPins[0].get()\n        const b = this.inputPins[1].get()\n        const c = this.inputPins[2].get()\n        const d = this.inputPins[3].get()\n        const sel = this.inputPins[4].get()\n        let out = 0\n        switch (sel) {\n            case 0: out = a; break\n            case 1: out = b; break\n            case 2: out = c; break\n            case 3: out = d; break\n        }\n        this.outputPins[0].set(out)\n    }\n}\n\nexport class Mux8Way16 extends BuiltInGate {\n    reCompute() {\n        const a = this.inputPins[0].get()\n        const b = this.inputPins[1].get()\n        const c = this.inputPins[2].get()\n        const d = this.inputPins[3].get()\n        const e = this.inputPins[4].get()\n        const f = this.inputPins[5].get()\n        const g = this.inputPins[6].get()\n        const h = this.inputPins[7].get()\n        const sel = this.inputPins[8].get()\n        let out = 0\n        switch (sel) {\n            case 0: out = a; break\n            case 1: out = b; break\n            case 2: out = c; break\n            case 3: out = d; break\n            case 4: out = e; break\n            case 5: out = f; break\n            case 6: out = g; break\n            case 7: out = h; break\n        }\n        this.outputPins[0].set(out)\n    }\n}\n\nexport class DMux extends BuiltInGate {\n    reCompute() {\n        const _in = this.inputPins[0].get()\n        const sel = this.inputPins[1].get()\n        this.outputPins[0].set(sel === 0 ? _in : 0)\n        this.outputPins[1].set(sel === 0 ? 0 : _in)\n    }\n}\n\nexport class DMux4Way extends BuiltInGate {\n    reCompute() {\n        const _in = this.inputPins[0].get()\n        const sel = this.inputPins[1].get()\n        this.outputPins[0].set(sel === 0 ? _in : 0)\n        this.outputPins[1].set(sel === 1 ? _in : 0)\n        this.outputPins[2].set(sel === 2 ? _in : 0)\n        this.outputPins[3].set(sel === 3 ? _in : 0)\n    }\n}\n\nexport class DMux8Way extends BuiltInGate {\n    reCompute() {\n        const _in = this.inputPins[0].get()\n        const sel = this.inputPins[1].get()\n        this.outputPins[0].set(sel === 0 ? _in : 0)\n        this.outputPins[1].set(sel === 1 ? _in : 0)\n        this.outputPins[2].set(sel === 2 ? _in : 0)\n        this.outputPins[3].set(sel === 3 ? _in : 0)\n        this.outputPins[4].set(sel === 4 ? _in : 0)\n        this.outputPins[5].set(sel === 5 ? _in : 0)\n        this.outputPins[6].set(sel === 6 ? _in : 0)\n        this.outputPins[7].set(sel === 7 ? _in : 0)\n    }\n}\n\nexport class Or8Way extends BuiltInGate {\n    reCompute() {\n        const _in = this.inputPins[0].get()\n        this.outputPins[0].set(_in === 0 ? 0 : 1)\n    }\n}\n\nconst gates = {\n    Not,\n    Not16,\n    And,\n    Or,\n    Xor,\n    Mux,\n    Mux4Way16,\n    Mux8Way16,\n    DMux,\n    DMux4Way,\n    DMux8Way,\n    Or8Way\n}\n\nexport default gates\n","import { BuiltInGate } from \"./../builtin-gate\"\n\nexport class HalfAdder extends BuiltInGate {\n    reCompute() {\n        const a = this.inputPins[0].get()\n        const b = this.inputPins[1].get()\n        this.outputPins[0].set(a ^ b)\n        this.outputPins[1].set(a & b)\n    }\n}\n\nexport class FullAdder extends BuiltInGate {\n    reCompute() {\n        const a = this.inputPins[0].get()\n        const b = this.inputPins[1].get()\n        const c = this.inputPins[2].get()\n        const sum = a + b + c\n        this.outputPins[0].set(sum % 2)\n        this.outputPins[1].set(sum / 2)\n    }\n}\n\nexport class Add16 extends BuiltInGate {\n    reCompute() {\n        const a = this.inputPins[0].get()\n        const b = this.inputPins[1].get()\n        this.outputPins[0].set(a + b)\n    }\n}\n\nexport class Inc16 extends BuiltInGate {\n    reCompute() {\n        const a = this.inputPins[0].get()\n        this.outputPins[0].set(a + 1)\n    }\n}\n\nexport class ALU extends BuiltInGate {\n    reCompute() {\n        let x = this.inputPins[0].get()\n        let y = this.inputPins[1].get()\n        const zx = this.inputPins[2].get()\n        const nx = this.inputPins[3].get()\n        const zy = this.inputPins[4].get()\n        const ny = this.inputPins[5].get()\n        const f = this.inputPins[6].get()\n        const no = this.inputPins[7].get()\n\n        if (zx) { x = 0 }\n        if (nx) { x = ~x }\n        if (zy) { y = 0 }\n        if (ny) { y = ~y }\n        let result = f === 1 ? (x+y) : (x&y)\n        if (no) { result = ~result }\n\n        this.outputPins[0].set(result) // out\n        this.outputPins[1].set(result === 0 ? 1 : 0) // zr\n        this.outputPins[2].set(result < 0 ? 1 : 0) // ng\n    }\n}\n\nconst gates = { HalfAdder, FullAdder, Add16, Inc16, ALU }\n\nexport default gates\n","import { BuiltInGate } from \"./../builtin-gate\"\nimport { GateClass } from \"../gateclass\"\nimport { Node } from \"../node\"\n\nexport class Bit extends BuiltInGate {\n    state: number\n\n    constructor(inputPins: Node[], outputPins: Node[], gateClass: GateClass) {\n        super(inputPins, outputPins, gateClass)\n        this.state = 0\n    }\n\n    clockUp() {\n        const load = this.inputPins[1].get()\n        if (load === 1)\n            this.state = this.inputPins[0].get()\n    }\n\n    clockDown() {\n        this.outputPins[0].set(this.state)\n    }\n}\n\nexport class Register extends BuiltInGate {\n    state: number\n\n    constructor(inputPins: Node[], outputPins: Node[], gateClass: GateClass) {\n        super(inputPins, outputPins, gateClass)\n        this.state = 0\n    }\n\n    clockUp() {\n        const load = this.inputPins[1].get()\n        if (load === 1)\n            this.state = this.inputPins[0].get()\n    }\n\n    clockDown() {\n        this.outputPins[0].set(this.state)\n    }\n}\n\nexport class PC extends BuiltInGate {\n    value: number\n\n    constructor(inputPins: Node[], outputPins: Node[], gateClass: GateClass) {\n        super(inputPins, outputPins, gateClass)\n        this.value = 0\n    }\n\n    clockUp() {\n        const _in = this.inputPins[0].get()\n        const load = this.inputPins[1].get()\n        const inc = this.inputPins[2].get()\n        const reset = this.inputPins[3].get()\n        if (reset === 1)\n            this.value = 0\n        else if (load === 1)\n            this.value = _in\n        else if (inc === 1)\n            this.value++\n    }\n\n    clockDown() {\n        this.outputPins[0].set(this.value)\n    }\n}\n\nexport class RAM extends BuiltInGate {\n    size: number\n\n    values: Uint16Array\n\n    constructor(inputPins: Node[], outputPins: Node[], gateClass: GateClass, size: number) {\n        super(inputPins, outputPins, gateClass)\n        this.size = size\n        this.values = new Uint16Array(size)\n    }\n\n    clockUp() {\n        const _in = this.inputPins[0].get()\n        const load = this.inputPins[1].get()\n        const address = this.inputPins[2].get()\n        if (load === 1) {\n            this.values[address] = _in\n        }\n    }\n\n    clockDown() {\n        this.reCompute()\n    }\n\n    reCompute() {\n        const address = this.inputPins[2].get()\n        this.outputPins[0].set(this.values[address])\n    }\n}\n\nexport class RAM8 extends RAM {\n    constructor(inputPins: Node[], outputPins: Node[], gateClass: GateClass) {\n        super(inputPins, outputPins, gateClass, 8)\n    }\n}\n\nexport class RAM64 extends RAM {\n    constructor(inputPins: Node[], outputPins: Node[], gateClass: GateClass) {\n        super(inputPins, outputPins, gateClass, 64)\n    }\n}\n\nexport class RAM512 extends RAM {\n    constructor(inputPins: Node[], outputPins: Node[], gateClass: GateClass) {\n        super(inputPins, outputPins, gateClass, 512)\n    }\n}\n\nexport class RAM4K extends RAM {\n    constructor(inputPins: Node[], outputPins: Node[], gateClass: GateClass) {\n        super(inputPins, outputPins, gateClass, 4096)\n    }\n}\n\nexport class RAM16K extends RAM {\n    constructor(inputPins: Node[], outputPins: Node[], gateClass: GateClass) {\n        super(inputPins, outputPins, gateClass, 16384)\n    }\n}\n\nconst gates = { Bit, Register, PC, RAM, RAM8, RAM64, RAM512, RAM4K, RAM16K }\nexport default gates\n","import { BuiltInGate } from \"./../builtin-gate\"\nimport { GateClass } from \"../gateclass\"\nimport { Node } from \"../node\"\n\nexport class Screen extends BuiltInGate {\n    values: Uint16Array\n\n    constructor(inputPins: Node[], outputPins: Node[], gateClass: GateClass) {\n        super(inputPins, outputPins, gateClass)\n        this.values = new Uint16Array(32 * 256)\n    }\n\n    clockUp() {\n        const _in = this.inputPins[0].get()\n        const load = this.inputPins[1].get()\n        const address = this.inputPins[2].get()\n        if (load === 1) {\n            this.values[address] = _in\n        }\n    }\n\n    reCompute() {\n        const address = this.inputPins[2].get()\n        this.outputPins[0].set(this.values[address])\n    }\n\n    clockDown() {\n        this.reCompute()\n    }\n}\n\nexport class Keyboard extends BuiltInGate {\n    key: number\n\n    constructor(inputPins: Node[], outputPins: Node[], gateClass: GateClass) {\n        super(inputPins, outputPins, gateClass)\n        this.key = -1\n    }\n}\n\nexport class ROM32K extends BuiltInGate {\n    static SIZE = 32768\n\n    values: Uint16Array\n\n    constructor(inputPins: Node[], outputPins: Node[], gateClass: GateClass) {\n        super(inputPins, outputPins, gateClass)\n        this.values = new Uint16Array(ROM32K.SIZE)\n    }\n\n    reCompute() {\n        const address = this.inputPins[0].get()\n        this.outputPins[0].set(this.values[address])\n    }\n}\n\nconst gates = { Screen, Keyboard, ROM32K }\nexport default gates\n","import { BuiltInGate } from \"../builtin-gate\"\nimport { GateClass } from \"../gateclass\"\nimport { Node } from \"../node\"\n\nimport logic from \"./logic\"\nimport arithmetic from \"./arithmetic\"\nimport memory from \"./memory\"\nimport computer from \"./computer\"\n\nexport class Nand extends BuiltInGate {\n    reCompute() {\n        const a = this.inputPins[0].get()\n        const b = this.inputPins[1].get()\n        this.outputPins[0].set(0x1 - (a & b))\n    }\n}\n\nexport class DFF extends BuiltInGate {\n    state: number\n\n    constructor(inputPins: Node[], outputPins: Node[], gateClass: GateClass) {\n        super(inputPins, outputPins, gateClass)\n        this.state = 0\n    }\n\n    clockUp() {\n        this.state = this.inputPins[0].get()\n    }\n\n    clockDown() {\n        this.outputPins[0].set(this.state)\n    }\n}\n\nexport type BuiltInDef = { hdl: string, gate: typeof BuiltInGate }\nexport type BuiltIns = { [_: string]: BuiltInDef }\n\nexport const builtins: BuiltIns = {\n    // GIVEN\n    Nand: {\n        hdl: `CHIP Nand { IN  a, b; OUT out; BUILTIN Nand; }`,\n        gate: Nand\n    },\n    DFF: {\n        hdl: `CHIP DFF { IN  in; OUT out; BUILTIN DFF; CLOCKED in; }`,\n        gate: DFF\n    },\n    // LOGIC\n    Not: {\n        hdl: `CHIP Not { IN  in; OUT out; BUILTIN Not; } `,\n        gate: logic.Not   \n    },\n    Not16: {\n      hdl: `CHIP Not16 { IN  in[16]; OUT out[16]; BUILTIN Not16; }`,\n      gate: logic.Not16\n    },\n    And: {\n      hdl: `CHIP And { IN  a, b; OUT out; BUILTIN And; } `,\n      gate: logic.And\n    },\n    And16: {\n      hdl: `CHIP And16 { IN  a[16], b[16]; OUT out[16]; BUILTIN And; }`,\n      gate: logic.And\n    },\n    Or: {\n      hdl: `CHIP Or { IN  a, b; OUT out; BUILTIN Or; }`,\n      gate: logic.Or\n    },\n    Or16: {\n      hdl: `CHIP Or16 { IN  a[16], b[16]; OUT out[16]; BUILTIN Or; }`,\n      gate: logic.Or\n    },\n    Xor: {\n      hdl: `CHIP Xor { IN  a, b; OUT out; BUILTIN Xor; }`,\n      gate: logic.Xor\n    },\n    Mux: {\n      hdl: `CHIP Mux { IN  a, b, sel; OUT out; BUILTIN Mux;}`,\n      gate: logic.Mux\n    },\n    Mux16: {\n      hdl: `CHIP Mux16 { IN  a[16], b[16], sel; OUT out[16]; BUILTIN Mux; }`,\n      gate: logic.Mux\n    },\n    Mux4Way16: {\n      hdl: ` CHIP Mux4Way16 { IN a[16], b[16], c[16], d[16], sel[2]; OUT out[16]; BUILTIN Mux4Way16; }`,\n      gate: logic.Mux4Way16\n    },\n    Mux8Way16: {\n      hdl: `CHIP Mux8Way16 { IN  a[16], b[16], c[16], d[16], e[16], f[16], g[16], h[16], sel[3]; OUT out[16]; BUILTIN Mux8Way16; }`,\n      gate: logic.Mux8Way16\n    },\n    DMux: {\n      hdl: `CHIP DMux { IN  in, sel; OUT a, b; BUILTIN DMux; }`,\n      gate: logic.DMux\n    },\n    DMux4Way: {\n      hdl: `CHIP DMux4Way { IN  in, sel[2]; OUT a, b, c, d; BUILTIN DMux4Way; }`,\n      gate: logic.DMux4Way\n    },\n    DMux8Way: {\n      hdl: `CHIP DMux8Way { IN  in, sel[3]; OUT a, b, c, d, e, f, g, h; BUILTIN DMux8Way; }`,\n      gate: logic.DMux8Way\n    },\n    Or8Way: {\n      hdl: `CHIP Or8Way { IN  in[8]; OUT out; BUILTIN Or8Way; }`,\n      gate: logic.Or8Way\n    },\n    //\n    // ARITHMETIC\n    //\n    HalfAdder: {\n      hdl: `CHIP HalfAdder { IN  a, b; OUT sum, carry; BUILTIN HalfAdder; }`,\n      gate: arithmetic.HalfAdder\n    },\n    FullAdder: {\n      hdl: `CHIP FullAdder { IN  a, b, c; OUT sum, carry; BUILTIN FullAdder; }`,\n      gate: arithmetic.FullAdder\n    },\n    Add16: {\n      hdl: `CHIP Add16 { IN  a[16], b[16]; OUT out[16]; BUILTIN Add16; }`,\n      gate: arithmetic.Add16\n    },\n    Inc16: {\n      hdl: `CHIP Inc16 { IN  in[16]; OUT out[16]; BUILTIN Inc16; }`,\n      gate: arithmetic.Inc16\n    },\n    ALU: {\n      hdl: `CHIP ALU { IN x[16], y[16], zx, nx, zy, ny, f, no; OUT out[16], zr, ng; BUILTIN ALU; }`,\n      gate: arithmetic.ALU\n    },\n    //\n    // MEMORY\n    //\n    Bit: {\n        hdl: `CHIP Bit { IN  in, load; OUT out; BUILTIN Bit; CLOCKED in, load; }`,\n        gate: memory.Bit\n    },\n    Register: {\n        hdl: `CHIP Register { IN  in[16], load; OUT out[16]; BUILTIN Register; CLOCKED in, load; }`,\n        gate: memory.Register\n    },\n    PC: {\n        hdl: `CHIP PC { IN  in[16], load, inc, reset; OUT out[16]; BUILTIN PC; CLOCKED in, load, inc, reset; }`,\n        gate: memory.PC\n    },\n    RAM8: {\n        hdl: `CHIP RAM8 { IN  in[16], load, address[3]; OUT out[16]; BUILTIN RAM8; CLOCKED in, load; }`,\n        gate: memory.RAM8\n    },\n    RAM64: {\n        hdl: `CHIP RAM64 { IN in[16], load, address[6]; OUT out[16]; BUILTIN RAM64; CLOCKED in, load; }`,\n        gate: memory.RAM64\n    },\n    RAM512: {\n        hdl: `CHIP RAM512 { IN  in[16], load, address[9]; OUT out[16]; BUILTIN RAM512; CLOCKED in, load; }`,\n        gate: memory.RAM512\n    },\n    RAM4K: {\n        hdl: `CHIP RAM4K { IN  in[16], load, address[12]; OUT out[16]; BUILTIN RAM4K; CLOCKED in, load; }`,\n        gate: memory.RAM4K\n    },\n    RAM16K: {\n        hdl: `CHIP RAM16K { IN  in[16], load, address[14]; OUT out[16]; BUILTIN RAM16K; CLOCKED in, load; }`,\n        gate: memory.RAM16K\n    },\n    //\n    // COMPUTER\n    //\n    Screen: {\n        hdl: `CHIP Screen { IN in[16], load, address[13]; OUT out[16]; BUILTIN Screen; CLOCKED in, load; }`,\n        gate: computer.Screen\n    },\n    Keyboard: {\n        hdl: `CHIP Keyboard { OUT out[16]; BUILTIN Keyboard; }`,\n        gate: computer.Keyboard\n    },\n    ROM32K: {\n        hdl: `CHIP ROM32K { IN  address[15]; OUT out[16]; BUILTIN ROM32K; }`,\n        gate: computer.ROM32K\n    },\n}\n\n","export function toBinaryString(node: Node): string {\n    return node.get().toString(2).padStart(16, \"0\")\n}\n\nexport class Node {\n    value: Uint16Array\n\n    connections: Set<Node> | null = null\n\n    constructor() {\n        this.value = new Uint16Array(1)\n    }\n\n    get() {\n      return this.value[0]\n    }\n\n    set(value: number) {\n        if (value === this.value[0]) return\n        this.value[0] = value\n        for (let connection of this.connections ?? [])\n            connection.set(this.get())\n    }\n\n    connect(node: Node) {\n        if (!this.connections) this.connections = new Set()\n        this.connections.add(node)\n    }\n\n    disconnect(node: Node) {\n        if (this.connections) this.connections.delete(node)\n    }\n}\n\nexport class SubNode extends Node {\n  mask: number\n  shiftRight: number\n\n  constructor([low, high]: SubBus) {\n    super()\n    this.mask = getMask(low, high)\n    this.shiftRight = low\n  }\n\n  set(value: number) {\n    super.set(value)\n  }\n\n  get(): number {\n    return (this.value[0] & this.mask) >>> this.shiftRight\n  }\n}\n\nexport type SubBus = [low: number, high: number]\n\nexport class SubBusListeningAdapter extends Node {\n  target: Node\n  mask: number\n  shiftLeft: number\n\n  constructor(node: Node, [low, high]: SubBus) {\n    super()\n    this.target = node\n    this.shiftLeft = low\n    this.mask = getMask(low, high)\n  }\n\n  get(): number {\n    return this.target.get()\n  }\n\n  set(value: number) {\n    const masked1 = this.target.get() & ~this.mask\n    const masked2 = (value << this.shiftLeft) & this.mask\n    this.target.set(masked1 | masked2)\n  }\n}\n\n// A helper array of powers of two\nexport const POWERS_OF_2 = [1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768]\n\nexport function getMask(low: number, high: number): number {\n  let mask = 0\n  let bitHolder = POWERS_OF_2[low]\n  for (let i=low; i<=high; i++) {\n    mask |= bitHolder\n    bitHolder = (bitHolder << 1)\n  }\n  return mask\n}\n","import { readPinsInfo } from \".\"\nimport { HDLParser } from \"../hdl/parser\"\nimport { TokenType } from \"../hdl/tokenizer\"\nimport { BuiltInGate } from \"./builtin-gate\"\nimport { builtins } from \"./builtins\"\nimport { Gate } from \"./gate\"\nimport { GateClass, PinInfo } from \"./gateclass\"\nimport { Node } from \"./node\"\n\nexport class BuiltInGateClass extends GateClass {\n  tsClassName: typeof BuiltInGate\n\n  constructor(name: string, parser: HDLParser, inputPinsInfo: PinInfo[], outputPinsInfo: PinInfo[]) {\n    super(name, inputPinsInfo, outputPinsInfo)\n    // read typescript class name\n    parser.expectPeek(TokenType.IDENTIFIER, \"Missing typescript class name\")\n    // TODO: support more than NAND\n    switch (name) {\n      // CH1\n      case \"Nand\": this.tsClassName = builtins.Nand.gate; break\n      case \"Not\": this.tsClassName = builtins.Not.gate; break\n      case \"Not16\": this.tsClassName = builtins.Not16.gate; break\n      case \"And\": this.tsClassName = builtins.And.gate; break\n      case \"And16\": this.tsClassName = builtins.And16.gate; break\n      case \"Or\": this.tsClassName = builtins.Or.gate; break\n      case \"Or16\": this.tsClassName = builtins.Or16.gate; break\n      case \"Xor\": this.tsClassName = builtins.Xor.gate; break\n      case \"Mux\": this.tsClassName = builtins.Mux.gate; break\n      case \"Mux16\": this.tsClassName = builtins.Mux16.gate; break\n      case \"Mux4Way16\": this.tsClassName = builtins.Mux4Way16.gate; break\n      case \"Mux8Way16\": this.tsClassName = builtins.Mux8Way16.gate; break\n      case \"DMux\": this.tsClassName = builtins.DMux.gate; break\n      case \"DMux4Way\": this.tsClassName = builtins.DMux4Way.gate; break\n      case \"DMux8Way\": this.tsClassName = builtins.DMux8Way.gate; break\n      case \"Or8Way\": this.tsClassName = builtins.Or8Way.gate; break\n      // CH2\n      case \"HalfAdder\": this.tsClassName = builtins.HalfAdder.gate; break\n      case \"FullAdder\": this.tsClassName = builtins.FullAdder.gate; break\n      case \"Add16\": this.tsClassName = builtins.Add16.gate; break\n      case \"Inc16\": this.tsClassName = builtins.Inc16.gate; break\n      case \"ALU\": this.tsClassName = builtins.ALU.gate; break\n      // CH3\n      case \"DFF\": this.tsClassName = builtins.DFF.gate; break // REQUIRED BUILTIN\n      case \"Bit\": this.tsClassName = builtins.Bit.gate; break\n      case \"Register\": this.tsClassName = builtins.Register.gate; break\n      case \"PC\": this.tsClassName = builtins.PC.gate; break\n      case \"RAM8\": this.tsClassName = builtins.RAM8.gate; break\n      case \"RAM64\": this.tsClassName = builtins.RAM64.gate; break\n      case \"RAM512\": this.tsClassName = builtins.RAM512.gate; break\n      case \"RAM4K\": this.tsClassName = builtins.RAM4K.gate; break\n      case \"RAM16K\": this.tsClassName = builtins.RAM16K.gate; break\n      // CH5\n      case \"Screen\": this.tsClassName = builtins.Screen.gate; break\n      case \"Keyboard\": this.tsClassName = builtins.Keyboard.gate; break\n      case \"ROM32K\": this.tsClassName = builtins.ROM32K.gate; break\n      default: parser.fail(`Unexpected gate class name ${name}`)\n    }\n    // read ';' symbol\n    parser.expectPeek(TokenType.SEMICOLON, \"Missing ';'\")\n\n    this.isInputClocked = new Array(inputPinsInfo.length)\n    this.isOutputClocked = new Array(outputPinsInfo.length)\n\n    if (parser.peekTokenIs(TokenType.CLOCKED)) {\n        this.isClocked = true\n        const clockedPins = readPinsInfo(parser)\n        for (let i=0; i<clockedPins.length; i++) {\n            let inputFound = false\n            let outputFound = false\n            for (let j=0; j<this.isInputClocked.length && !inputFound; j++) {\n                if (!this.isInputClocked[j]) {\n                    inputFound = inputPinsInfo[j].name === clockedPins[i].name\n                    this.isInputClocked[j] = inputFound\n                }\n            }\n            if (!inputFound) {\n                for (let j=0; j<this.isOutputClocked.length && !outputFound; j++) {\n                    if (!this.isOutputClocked[j]) {\n                        outputFound = outputPinsInfo[j].name === clockedPins[j].name\n                        this.isOutputClocked[j] = outputFound\n                    }\n                }\n            }\n        }\n    }\n\n    // read '}' symbol\n    parser.expectPeek(TokenType.RBRACE, \"Missing '}'\")\n  }\n\n  newInstance(): Gate {\n    const inputNodes: Node[] = this.inputPinsInfo.map((_) => new Node())\n    const outputNodes: Node[] = this.outputPinsInfo.map((_) => new Node())\n    return new this.tsClassName(inputNodes, outputNodes, this)\n  }\n}\n","import { SubBus } from \"./node\"\n\nexport enum ConnectionType {\n    FROM_INPUT = \"FROM_INPUT\",\n    TO_OUTPUT = \"TO_OUTPUT\",\n    FROM_INTERNAL = \"FROM_INTERNAL\",\n    TO_INTERNAL = \"TO_INTERNAL\",\n    FROM_TRUE = \"FROM_TRUE\",\n    FROM_FALSE = \"FROM_FALSE\",\n    INVALID = \"INVALID\"\n}\n\nexport type Connection = {\n    type: ConnectionType\n    gatePinNumber: number\n    partNumber: number\n    partPinName: string\n    gateSubBus: SubBus | null\n    partSubBus: SubBus | null\n}\n","import { Gate } from \"./gate\"\nimport { GateClass, PinType } from \"./gateclass\"\nimport { Node } from \"./node\"\n\nexport class CompositeGate extends Gate {\n  parts: Gate[]\n  internalPins: Node[]\n\n  constructor(inputPins: Node[], outputPins: Node[], internalPins: Node[], gateClass: GateClass, parts: Gate[]) {\n    super(inputPins, outputPins, gateClass)\n    this.internalPins = internalPins\n    this.parts = parts\n  }\n\n  reCompute() {\n    for (let part of this.parts) part.eval()\n  }\n\n  clockUp() {\n    if (this.gateClass.isClocked) {\n      for (const part of this.parts) part.tick();\n    }\n  }\n\n  clockDown() {\n    if (this.gateClass.isClocked)\n      for (const part of this.parts) part.tock();\n  }\n\n  getNode(name: string): Node | null {\n    const result = super.getNode(name)\n    if (!result) {\n      const type = this.gateClass.getPinType(name)\n      const index = this.gateClass.getPinNumber(name)\n      if (type === PinType.INTERNAL) return this.internalPins[index]\n    }\n    return result\n  }\n}\n","import { Connection, ConnectionType } from \"./connection\"\nimport { Gate } from \"./gate\"\nimport { GateClass, PinInfo, PinType } from \"./gateclass\"\nimport { Node, SubNode, SubBus, SubBusListeningAdapter } from \"./node\"\nimport { HDLParser } from \"./../hdl/parser\"\nimport { TokenType } from \"./../hdl/tokenizer\"\nimport { CompositeGate } from \"./composite-gate\"\nimport { getGateClass } from \".\"\n\nexport type Name = string\nexport type Content = string\nexport type UserWorkspace = Map<string, string>\n\nexport class CompositeGateClass extends GateClass {\n  partsList: GateClass[]\n  internalPinsInfo: PinInfo[]\n  connections: Set<Connection>\n\n  constructor(name: string,\n              parser: HDLParser,\n              inputPinsInfo: PinInfo[],\n              outputPinsInfo: PinInfo[],\n              userDefinedParts: UserWorkspace) {\n    super(name, inputPinsInfo, outputPinsInfo)\n    this.partsList = []\n    this.internalPinsInfo = []\n    this.connections = new Set()\n    this.readParts(parser, userDefinedParts)\n  }\n\n  newInstance(): Gate {\n    const parts: Gate[] = this.partsList.map((partClass) => partClass.newInstance())\n\n    const inputNodes = this.inputPinsInfo.map((_) => new Node())\n    const outputNodes = this.outputPinsInfo.map((_) => new Node())\n    const internalNodes = this.internalPinsInfo.map((_) => new Node())\n\n    const internalConnections = new Set<Connection>()\n\n    // First scan\n    let partNode: Node | null = null\n    let gateSubBus: SubBus | null = null\n    let partSubBus: SubBus | null = null\n    for (const connection of this.connections) {\n      partNode = parts[connection.partNumber].getNode(connection.partPinName)\n      if (!partNode) continue\n      gateSubBus = connection.gateSubBus\n      partSubBus = connection.partSubBus\n\n      switch (connection.type) {\n        case ConnectionType.FROM_INPUT:\n          this.connectGateToPart(inputNodes[connection.gatePinNumber], gateSubBus, partNode, partSubBus)\n          break\n        case ConnectionType.TO_OUTPUT:\n          this.connectGateToPart(partNode, partSubBus, outputNodes[connection.gatePinNumber], gateSubBus)\n          break\n        case ConnectionType.TO_INTERNAL:\n          const target = partSubBus === null ? new Node() : new SubNode(partSubBus)\n          partNode.connect(target)\n          internalNodes[connection.gatePinNumber] = target\n          break\n        case ConnectionType.FROM_INTERNAL:\n        case ConnectionType.FROM_TRUE:\n        case ConnectionType.FROM_FALSE:\n          internalConnections.add(connection)\n          break\n      }\n    }\n\n    // Second scan\n    let subNode: SubNode\n    for (const connection of internalConnections) {\n      partNode = parts[connection.partNumber].getNode(connection.partPinName)\n      if (!partNode) continue\n      gateSubBus = connection.gateSubBus\n      partSubBus = connection.partSubBus\n\n      switch (connection.type) {\n        case ConnectionType.FROM_INTERNAL:\n          const source = internalNodes[connection.gatePinNumber]\n          if (!partSubBus) {\n            source.connect(partNode)\n          } else {\n            const node = new SubBusListeningAdapter(partNode, partSubBus)\n            source.connect(node)\n          }\n          break\n        case ConnectionType.FROM_TRUE:\n          if (!gateSubBus) HDLParser.fail(\"gateSubBus is null\")\n          subNode = new SubNode(gateSubBus)\n          subNode.set(1)\n          if (!partSubBus) {\n            partNode.set(subNode.get())\n          } else {\n            const node = new SubBusListeningAdapter(partNode, partSubBus)\n            node.set(subNode.get())\n          }\n          break\n        case ConnectionType.FROM_FALSE:\n          if (!gateSubBus) HDLParser.fail(\"gateSubBus is null\")\n          subNode = new SubNode(gateSubBus)\n          subNode.set(0)\n          if (!partSubBus) {\n            partNode.set(subNode.get())\n          } else {\n            const node = new SubBusListeningAdapter(partNode, partSubBus)\n            node.set(subNode.get())\n          }\n          break\n      }\n    }\n\n    return new CompositeGate(inputNodes, outputNodes, internalNodes, this, parts)\n  }\n\n  connectGateToPart(sourceNode: Node, sourceSubBus: SubBus | null, targetNode: Node, targetSubBus: SubBus | null) {\n    let target = targetNode\n    if (targetSubBus) {\n      target = new SubBusListeningAdapter(target, targetSubBus)\n    }\n    if (!sourceSubBus) {\n      sourceNode.connect(target)\n    } else {\n      const subNode = new SubNode(sourceSubBus)\n      sourceNode.connect(subNode)\n      subNode.connect(target)\n    }\n  }\n\n  readParts(parser: HDLParser, userDefinedParts: UserWorkspace) {\n    let endOfParts = false\n    while (parser.hasMoreTokens() && !endOfParts) {\n      // check if end of hdl\n      if (parser.peekTokenIs(TokenType.RBRACE)) {\n        // read }\n        parser.advance()\n        endOfParts = true\n      } else {\n        // read partName\n        parser.expectPeek(TokenType.IDENTIFIER, \"A GateClass name is expected\")\n        const partName = parser.token.literal ?? ''\n        // make part\n        const gateClass = getGateClass(partName, userDefinedParts)\n        const partNumber = this.partsList.length\n        this.partsList.push(gateClass)\n        this.isClocked = this.isClocked || gateClass.isClocked\n        // read (\n        parser.expectPeek(TokenType.LPAREN, \"Missing '('\")\n        // read pins\n        this.readPinNames(parser, partName, partNumber)\n        // read ;\n        parser.expectPeek(TokenType.SEMICOLON, \"Missing ';'\")\n      }\n    }\n    if (!endOfParts) parser.fail(\"Missing '}'\")\n    // read EOF\n    parser.expectPeek(TokenType.EOF, \"Expected EOF after '}'\")\n  }\n\n  readSubBus(parser: HDLParser): SubBus {\n    // read low\n    parser.expectPeek(TokenType.INT, \"Missing bus\")\n    const low = parseInt(parser.token.literal ?? \"\")\n    let high = low\n    if (parser.peekTokenIs(TokenType.DOT)) {\n      // read .\n      parser.advance()\n      // read .\n      parser.expectPeek(TokenType.DOT, \"Expected '..'\")\n      // read high\n      parser.expectPeek(TokenType.INT, \"Expected high sub bus\")\n      high = parseInt(parser.token.literal ?? \"\")\n    }\n    return [low, high]\n  }\n\n  readPinNames(parser: HDLParser, partName: string, partNumber: number): void | never {\n    let endOfPins = false\n    // read pin names\n    while (parser.hasMoreTokens() && !endOfPins) {\n      // read left pin name\n      parser.expectPeek(TokenType.IDENTIFIER, \"A pin name is expected\")\n      const leftName = parser.token.literal ?? \"\"\n      // read left sub bus\n      let leftSubBus: SubBus | null = null\n      if (parser.peekTokenIs(TokenType.LBRACKET)) {\n        // read [\n        parser.advance()\n        leftSubBus = this.readSubBus(parser)\n        // read ]\n        parser.expectPeek(TokenType.RBRACKET, \"Missing ']'\")\n      }\n\n      // read =\n      parser.expectPeek(TokenType.EQUAL, \"Missing '='\")\n      // read right pin name\n      const rightPinPossibilities = [TokenType.IDENTIFIER, TokenType.TRUE, TokenType.FALSE]\n      parser.expectPeekOneOf(rightPinPossibilities, \"A pin name, true, or false is expected\")\n      const rightName = parser.token.literal ?? \"\"\n      // read right sub bus\n      let rightSubBus: SubBus | null = null\n      if (parser.peekTokenIs(TokenType.LBRACKET)) {\n        // read [\n        parser.advance()\n        rightSubBus = this.readSubBus(parser)\n        // read ]\n        parser.expectPeek(TokenType.RBRACKET, \"Missing ']'\")\n      }\n\n      // make connection\n      this.addConnection(parser, partName, partNumber, leftName, rightName, rightSubBus, leftSubBus)\n\n      // read , or )\n      if (parser.peekTokenIs(TokenType.RPAREN)) {\n        endOfPins = true\n      } else if (!parser.peekTokenIs(TokenType.COMMA)) {\n        parser.fail(\"Missing ',' or ')'\")\n      }\n      parser.advance()\n    }\n\n    if (!endOfPins) parser.fail(\"Unexpected EOF\")\n  }\n\n  getPinInfo(type: PinType, number: number): PinInfo | null {\n    if (type === PinType.INTERNAL && number < this.internalPinsInfo.length) {\n      return this.internalPinsInfo[number]\n    } else {\n      return super.getPinInfo(type, number)\n    }\n  }\n\n  addConnection(parser: HDLParser, partName: string, partNumber: number, leftName: string, rightName: string, rightSubBus: SubBus | null, leftSubBus: SubBus | null): void | never {\n    const partGateClass = this.partsList[partNumber]\n\n    const leftType = partGateClass.getPinType(leftName)\n    if (leftType === PinType.UNKNOWN) parser.fail(`${leftName} is not a pin in ${partName}`)\n    const leftNumber = partGateClass.getPinNumber(leftName)\n    const leftPinInfo = partGateClass.getPinInfo(leftType, leftNumber)\n    const leftWidth = (leftSubBus ? leftSubBus[1] - leftSubBus[0] + 1 : leftPinInfo?.width) ?? 0\n\n    let rightType = PinType.UNKNOWN\n    let rightNumber: number = 0\n    let rightPinInfo: PinInfo | null\n\n    let selfFittingWidth = false\n\n    let connectionType: ConnectionType = ConnectionType.INVALID\n\n    if (rightName === TokenType.TRUE) {\n      rightPinInfo = { name: rightName, width: 16 }\n      connectionType = ConnectionType.FROM_TRUE\n      selfFittingWidth = true\n    } else if (rightName === TokenType.FALSE) {\n      rightPinInfo = { name: rightName, width: 16 }\n      connectionType = ConnectionType.FROM_TRUE\n      selfFittingWidth = true\n    } else {\n      rightType = this.getPinType(rightName)\n      if (rightType === PinType.UNKNOWN) {\n        rightType = PinType.INTERNAL\n        rightPinInfo = { name: rightName, width: leftWidth }\n        rightNumber = this.internalPinsInfo.length\n        this.internalPinsInfo.push(rightPinInfo)\n        this.registerPin(rightPinInfo, PinType.INTERNAL, rightNumber)\n      } else {\n        rightNumber = this.getPinNumber(rightName)\n        rightPinInfo = this.getPinInfo(rightType, rightNumber)\n      }\n    }\n\n    let rightWidth = (rightSubBus ? rightSubBus[1] - rightSubBus[0] + 1 : rightPinInfo?.width) ?? 1\n    if (selfFittingWidth) {\n      rightWidth = leftWidth\n      rightSubBus = [0, rightWidth-1]\n    }\n\n    // check that leftWidth and rightWidth are the same\n    if (leftWidth !== rightWidth)\n      parser.fail(`${leftName}(${leftWidth}) and ${rightName}(${rightWidth}) have different bus widths`)\n\n\n    switch (leftType) {\n      case PinType.INPUT:\n        switch (rightType) {\n          case PinType.INPUT:\n            connectionType = ConnectionType.FROM_INPUT\n            break\n          case PinType.INTERNAL:\n            connectionType = ConnectionType.FROM_INTERNAL\n            break\n          case PinType.OUTPUT:\n            parser.fail(\"Can't connect gate's output pin to part\")\n        }\n        break\n      case PinType.OUTPUT:\n        switch (rightType) {\n          case PinType.OUTPUT:\n            connectionType = ConnectionType.TO_OUTPUT\n            break\n          case PinType.INTERNAL:\n            connectionType = ConnectionType.TO_INTERNAL\n            break\n          case PinType.INPUT:\n            parser.fail(\"Can't connect part's output pin to gate's input pin\")\n        }\n        break\n    }\n\n    this.connections.add({\n      type: connectionType,\n      gatePinNumber: rightNumber,\n      partNumber,\n      partPinName: leftName,\n      gateSubBus: rightSubBus,\n      partSubBus: leftSubBus,\n    })\n  }\n}\n","import { HDLParser } from \"../hdl/parser\";\nimport { HDLTokenizer, TokenType } from \"../hdl/tokenizer\";\nimport { BuiltInGateClass } from \"./builtin-gateclass\";\nimport { builtins } from \"./builtins\";\nimport { CompositeGateClass, UserWorkspace } from \"./composite-gateclass\";\nimport { GateClass, PinInfo } from \"./gateclass\";\n\nexport function getGateClass(name: string, userDefinedParts: UserWorkspace): GateClass | never {\n  const hdlFileName = `${name}.hdl`\n  if (userDefinedParts.has(hdlFileName)) {\n    const hdl = userDefinedParts.get(hdlFileName) ?? \"\"\n    return getGateClassHDL(hdl, userDefinedParts)\n  } else {\n    return getGateClassBuiltIn(name, userDefinedParts)\n  }\n}\n\nexport function getGateClassHDL(hdl: string, userDefinedParts: UserWorkspace): GateClass | never {\n    const tokenizer = new HDLTokenizer(hdl)\n    const parser = new HDLParser(tokenizer)\n    return readHDL(parser, userDefinedParts)\n}\n\nexport function getGateClassBuiltIn(name: string, userDefinedParts: UserWorkspace): GateClass | never {\n    let hdl: string\n    switch (name) {\n        // CH1\n        case \"Nand\": hdl = builtins.Nand.hdl; break\n        case \"Not\": hdl = builtins.Not.hdl; break\n        case \"Not16\": hdl = builtins.Not16.hdl; break\n        case \"And\": hdl = builtins.And.hdl; break\n        case \"And16\": hdl = builtins.And16.hdl; break\n        case \"Or\": hdl = builtins.Or.hdl; break\n        case \"Or16\": hdl = builtins.Or16.hdl; break\n        case \"Xor\": hdl = builtins.Xor.hdl; break\n        case \"Mux\": hdl = builtins.Mux.hdl; break\n        case \"Mux16\": hdl = builtins.Mux16.hdl; break\n        case \"Mux4Way16\": hdl = builtins.Mux4Way16.hdl; break\n        case \"Mux8Way16\": hdl = builtins.Mux8Way16.hdl; break\n        case \"DMux\": hdl = builtins.DMux.hdl; break\n        case \"DMux4Way\": hdl = builtins.DMux4Way.hdl; break\n        case \"DMux8Way\": hdl = builtins.DMux8Way.hdl; break\n        case \"Or8Way\": hdl = builtins.Or8Way.hdl; break\n        // CH2\n        case \"HalfAdder\": hdl = builtins.HalfAdder.hdl; break\n        case \"FullAdder\": hdl = builtins.FullAdder.hdl; break\n        case \"Add16\": hdl = builtins.Add16.hdl; break\n        case \"Inc16\": hdl = builtins.Inc16.hdl; break\n        case \"ALU\": hdl = builtins.ALU.hdl; break\n        // CH3\n        case \"DFF\": hdl = builtins.DFF.hdl; break\n        case \"Bit\": hdl = builtins.Bit.hdl; break\n        case \"Register\": hdl = builtins.Register.hdl; break\n        case \"PC\": hdl = builtins.PC.hdl; break\n        case \"RAM8\": hdl = builtins.RAM8.hdl; break\n        case \"RAM64\": hdl = builtins.RAM64.hdl; break\n        case \"RAM512\": hdl = builtins.RAM512.hdl; break\n        case \"RAM4K\": hdl = builtins.RAM4K.hdl; break\n        case \"RAM16K\": hdl = builtins.RAM16K.hdl; break\n        // CH5\n        case \"Screen\": hdl = builtins.Screen.hdl; break\n        case \"Keyboard\": hdl = builtins.Keyboard.hdl; break\n        case \"ROM32K\": hdl = builtins.ROM32K.hdl; break\n        default: HDLParser.fail(`Invalid builtin gate class name: ${name}`)\n    }\n    return getGateClassHDL(hdl, userDefinedParts)\n}\n\nexport function readHDL(parser: HDLParser, userDefinedParts: UserWorkspace): GateClass | never {\n  // read CHIP keyword\n  parser.expectCurrent(TokenType.CHIP, `Missing 'CHIP' keyword`)\n  // read gate name\n  parser.expectPeek(TokenType.IDENTIFIER, \"Missing chip name\")\n  const gateName = parser.token.literal ?? \"\"\n  // read {\n  parser.expectPeek(TokenType.LBRACE, \"Missing '{'\")\n  // read IN keyword\n  const inputPinsInfo = parser.peekTokenIs(TokenType.IN) ? readPinsInfo(parser) : []\n  // read OUT keyword\n  const outputPinsInfo = parser.peekTokenIs(TokenType.OUT) ? readPinsInfo(parser) : []\n\n  // read BUILTIN or PARTS\n  parser.advance()\n  if (parser.tokenIs(TokenType.BUILTIN)) {\n    return new BuiltInGateClass(gateName, parser, inputPinsInfo, outputPinsInfo)\n  } else if (parser.tokenIs(TokenType.PARTS)) {\n    // read :\n    parser.expectPeek(TokenType.COLON, \"Missing ':'\")\n    return new CompositeGateClass(gateName, parser, inputPinsInfo, outputPinsInfo, userDefinedParts)\n  } else {\n    return parser.fail(\"'PARTS' or 'BUILTIN' keyword expected\")\n  }\n}\n\nexport function readPinsInfo(parser: HDLParser): PinInfo[] {\n  let pinInfos: PinInfo[] = []\n  let exit = false\n\n  parser.advance()\n  while (parser.hasMoreTokens() && !exit) {\n    // check ';' symbol\n    if (parser.tokenIs(TokenType.SEMICOLON)) {\n      exit = true\n    } else {\n      // read pin name\n      parser.expectPeek(TokenType.IDENTIFIER, `Missing pin name, found ${parser.peek.literal}`)\n      const pinName = parser.token.literal ?? \"\"\n      // read width or separator\n      let pinWidth = 1\n      if (parser.peekTokenIs(TokenType.LBRACKET)) {\n        // read [\n        parser.advance()\n        // read width\n        parser.expectPeek(TokenType.INT, \"Missing width\")\n        pinWidth = parseInt(parser.token.literal ?? \"\")\n        // read ]\n        parser.expectPeek(TokenType.RBRACKET, \"Missing ']'\")\n      }\n\n      pinInfos.push({ name: pinName, width: pinWidth })\n      // check separator\n      parser.expectPeekOneOf([TokenType.COMMA, TokenType.SEMICOLON], \"Missing ',' or ';'\")\n    }\n  }\n\n  if (!exit) parser.fail(\"Unexpected EOF\")\n\n  return pinInfos\n}\n\n\n","import { getGateClass } from \"../gates\"\nimport { UserWorkspace } from \"../gates/composite-gateclass\"\nimport { Gate } from \"../gates/gate\"\nimport { Node } from \"../gates/node\"\n\nexport class HardwareSimulator {\n    gate: Gate | null\n    clockUp: boolean\n\n    time: number;\n\n    // TODO: too many instances of this floating around, need to clean it up\n    userWorkspace: UserWorkspace | null;\n\n    // TODO: this needs to go away\n    setGateFilename: (_:string) => void;\n\n    constructor(setGateFilename: (_:string) => void) {\n        this.setGateFilename = setGateFilename;\n        this.gate = null\n        this.clockUp = false\n        this.time = 0;\n        this.userWorkspace = null;\n    }\n\n    loadGate(name: string, userWorkspace: UserWorkspace) {\n        this.gate = getGateClass(name, userWorkspace).newInstance();\n        this.userWorkspace = userWorkspace;\n    }\n\n    step() {\n        if (this.clockUp) {\n            this.performTock()\n        } else {\n            this.performTick()\n        }\n    }\n\n    restart() {\n        // reset input pins to 0\n        this.gate?.eval();\n        this.time = 0;\n        this.clockUp = false;\n    }\n\n    performTock() {\n        if (this.gate === null) return;\n\n        this.gate.tock()\n        this.clockUp = false\n        this.time++;\n    }\n\n    performTick() {\n        if (this.gate === null) return;\n\n        this.gate.tick()\n        this.clockUp = true\n    }\n\n    performEval() {\n        if (this.gate === null) return;\n\n        this.gate.eval();\n    }\n\n    setInputPin(pinNumber: number, value: number) {\n        this.gate?.inputPins[pinNumber].set(value)\n    }\n\n    getValue(varName: string): string | never {\n        if (varName === 'time') {\n            return this.time.toString() + (this.clockUp ? '+' : ' ');\n        } else {\n            const node = this.gate?.getNode(varName);\n            if (node) {\n                return node.get().toString();\n            }\n        }\n        throw new Error(`incomplete getValue ${varName}`);\n    }\n\n    setValue(varName: string, value: string) {\n        if (this.gate === null) { throw new Error(\"\"); }\n        let decimalForm = toDecimalForm(value);\n\n        const numValue = parseInt(decimalForm);\n        const node: Node | null = this.gate.getNode(varName);\n        if (node) {\n            // TODO: all but INPUT pins are readonly, add check\n            node.set(numValue);\n        }\n    }\n\n    doCommand(command: string[]) {\n        // console.log(\"doCommand\", command);\n        if (command.length === 0) {\n            // TODO: throw error\n            // console.log(\"No command\");\n            return;\n        }\n\n        const commandName = command[0];\n\n        if (commandName === 'tick') {\n            this.performTick();\n        } else if (commandName === 'tock') {\n            this.performTock();\n        } else if (commandName === 'load') {\n            if (!this.userWorkspace) { return; }\n            // TODO: BUG: reload gate hdl in UI\n            this.loadGate(command[1].slice(0, -4), this.userWorkspace);\n            this.setGateFilename(command[1]);\n        } else if (commandName === 'set') {\n            this.setValue(command[1], command[2]);\n        } else if (commandName === 'eval') {\n            this.performEval();\n        }\n    }\n}\n\nfunction toDecimalForm(value: string): string {\n    let toParse = value;\n    let radix = 10;\n    if (toParse.startsWith('%B')) {\n        toParse = toParse.substring(2);\n        radix = 2;\n    }\n    return parseInt(toParse, radix).toString();\n}\n","export enum TokenType {\n  IDENTIFIER = 'IDENTIFIER',\n  INT = 'INT',\n  EOF = 'EOF',\n\n  REPEAT = 'REPEAT',\n  OUTPUT_FILE = 'OUTPUT-FILE',\n  COMPARE_TO = 'COMPARE-TO',\n  OUTPUT_LIST = 'OUTPUT-LIST',\n  OUTPUT = 'OUTPUT',\n\n  SEMICOLON = 'SEMICOLON',\n  COMMA = 'COMMA',\n  LBRACE = '{',\n  RBRACE = '}',\n\n  INVALID = 'INVALID',\n}\n\nexport class ScriptError extends Error {}\n\nexport type Token = {\n  type: TokenType | null\n  literal: string | null\n}\n\nexport class ScriptTokenizer {\n  private input: string\n  private readpos: number\n  private pos: number\n  private cur: string\n  private keywords: { [_: string]: TokenType }\n\n  // current token\n  token: Token = { type: null, literal: null }\n\n  lineNumber: number;\n\n\n  constructor (input: string) {\n    this.input = input\n    this.readpos = 0\n    this.pos = 0\n    this.cur = ''\n    this.keywords = {\n      'repeat': TokenType.REPEAT,\n      'output-file': TokenType.OUTPUT_FILE,\n      'compare-to': TokenType.COMPARE_TO,\n      'output-list': TokenType.OUTPUT_LIST,\n      'output': TokenType.OUTPUT,\n    };\n\n    this.lineNumber = 0;\n    this.readChar()\n  }\n\n  hasMoreTokens (): boolean {\n    return this.token.type !== TokenType.EOF\n  }\n\n  advance () {\n    this.skipWhitespaceAndComments()\n\n    this.token.literal = this.cur\n    switch (this.cur) {\n      case ';':\n        this.token.type = TokenType.SEMICOLON\n        break;\n      case ',':\n        this.token.type = TokenType.COMMA\n        break;\n      case '{':\n        this.token.type = TokenType.LBRACE\n        break\n      case '}':\n        this.token.type = TokenType.RBRACE\n        break;\n      case '':\n        this.token.type = TokenType.EOF\n        break\n      default:\n        if (isLetter(this.cur)) {\n          const ident = this.readIdentifier()\n          this.token.type = this.lookupIdentifier(ident)\n          this.token.literal = ident\n          return\n        } else if (isDigit(this.cur)) {\n          this.token.type = TokenType.INT\n          this.token.literal = this.readNumber()\n          return\n        }\n    }\n\n    this.readChar()\n  }\n\n  fail (message: string): never {\n    ScriptTokenizer.fail(message)\n  }\n\n  static fail (message: string): never {\n    throw new ScriptError(message)\n  }\n\n  private lookupIdentifier (ident: string): TokenType {\n    return this.keywords[ident] ?? TokenType.IDENTIFIER\n  }\n\n  private readIdentifier (): string {\n    const pos = this.pos\n    while (isLetter(this.cur) || isDigit(this.cur) || this.cur === '-' || this.cur === '.') {\n      this.readChar()\n    }\n    return this.input.substring(pos, this.pos)\n  }\n\n  private readNumber (): string {\n    const pos = this.pos\n    while (isDigit(this.cur)) {\n      this.readChar()\n    }\n    return this.input.substring(pos, this.pos)\n  }\n\n  private readChar () {\n    this.cur = this.readpos >= this.input.length ? '' : this.input[this.readpos]\n    this.pos = this.readpos\n    this.readpos++\n  }\n\n  private peekChar () {\n    return this.readpos >= this.input.length ? '' : this.input[this.readpos]\n  }\n\n  private skipWhitespaceAndComments () {\n    let inSlashComment = false\n    let inStarComment = false\n\n    while (true) {\n      const peek = this.peekChar()\n\n      if (this.cur === '\\n') { this.lineNumber++; }\n\n      // isSlashCommentStart\n      if (this.cur === '/' && peek === '/') {\n        inSlashComment = true\n        this.readChar() // read peek as well\n        // isSlashCommentEnd\n      } else if (inSlashComment && this.cur === '\\n') {\n        inSlashComment = false\n        // isStarCommentStart\n      } else if (this.cur === '/' && peek === '*') {\n        inStarComment = true\n        this.readChar() // read peek as well\n        // isStarCommentEnd\n      } else if (inStarComment && (this.cur === '*' && peek === '/')) {\n        inStarComment = false\n        this.readChar() // read peek as well\n      } else if (!inSlashComment && !inStarComment && !(this.cur === ' ' || this.cur === '\\t' ||\n                                                        this.cur === '\\n' || this.cur === '\\r')) {\n        return\n      }\n\n      this.readChar()\n    }\n  }\n}\n\nfunction isLetter (char: string): boolean {\n  const n = char.charCodeAt(0)\n  return (n >= 65 && n < 91) || (n >= 97 && n < 123) || char === '%';\n}\n\nfunction isDigit (char: string): boolean {\n  const n = char.charCodeAt(0)\n  return (n >= 48 && n < 58)\n}\n\n","export type TestScriptProps = {\n  script: string | null\n  currentLine: number | null\n}\n\nexport function TestScript({ script, currentLine }: TestScriptProps) {\n  const lines = (script ?? '').split('\\n');\n  return (<div className=\"testScript\">\n          {lines.map((line, index) => {\n            const classes = `testLine ${(index-1) === currentLine ? 'highlight' : ''}`;\n            return (<pre key={index} className={classes}>{line}</pre>);\n          })}\n        </div>)\n}\n","import { ScriptTokenizer, TokenType } from \"./tokenizer\";\n\nexport class VariableFormat {\n    varName: string;\n    format: string;\n    padL: number;\n    padR: number;\n    len: number;\n\n    constructor(varName: string, format: string, padL: number, padR: number, len: number) {\n        this.varName = varName;\n        this.format = format;\n        this.padL = padL;\n        this.padR = padR;\n        this.len = len;\n    }\n}\n\nexport enum CommandCode {\n    END,\n    SIMULATOR,\n    REPEAT,\n    REPEAT_END,\n    OUTPUT_FILE,\n    COMPARE_TO,\n    OUTPUT_LIST,\n    OUTPUT,\n}\n\nexport enum TerminatorType {\n    SINGLE_STEP,\n    MINI_STEP,\n}\n\nexport class Command {\n    code: CommandCode\n    args: any;\n    terminator: TerminatorType | undefined\n\n    constructor(code: CommandCode, arg: any) {\n        this.code = code;\n        this.args = arg;\n    }\n\n    getArg(): any {\n        return this.args;\n    }\n\n    setTerminator(type: TerminatorType) {\n        this.terminator = type;\n    }\n}\n\nexport class Script {\n    input: ScriptTokenizer;\n    commands: Command[];\n\n    lineNumbers: number[];\n\n    constructor(script: string) {\n        this.input = new ScriptTokenizer(script);\n        this.commands = [];\n        this.lineNumbers = [];\n        this.buildScript();\n    }\n\n    getCommandAt(index: number): Command {\n        return this.commands[index];\n    }\n\n    readArgs(maxArgs: number): string[] {\n        let args = new Array(maxArgs);\n        let i = 0;\n        while (this.input.hasMoreTokens() &&\n                (this.input.token.type !== TokenType.SEMICOLON) &&\n                    (this.input.token.type !== TokenType.COMMA) &&\n                     i < maxArgs) {\n            args[i] = this.input.token.literal ?? \"\"\n            this.input.advance();\n            i++;\n        }\n        return args;\n    }\n\n    buildScript() {\n        let command: Command | null = null\n        let repeatOpen = false;\n        let lineNumber = 0;\n        while (this.input.hasMoreTokens()) {\n            lineNumber = this.input.lineNumber - 1;\n            this.input.advance();\n\n            switch (this.input.token.type) {\n                case TokenType.REPEAT:\n                    command = this.createRepeatCommand();\n                    repeatOpen = true;\n                    break;\n                case TokenType.OUTPUT_FILE:\n                    command = this.createOutputFileCommand();\n                    break;\n                case TokenType.COMPARE_TO:\n                    command = this.createCompareToCommand();\n                    break;\n                case TokenType.OUTPUT_LIST:\n                    command = this.createOutputListCommand();\n                    break;\n                case TokenType.OUTPUT:\n                    command = this.createOutputCommand();\n                    break;\n                case TokenType.IDENTIFIER:\n                    // read arg\n                    const args = this.readArgs(4); // 4 = MAX_SIMULARTS_ARGS_COUNT\n                    command = new Command(CommandCode.SIMULATOR, args);\n                    break;\n                case TokenType.RBRACE:\n                    if (repeatOpen) {\n                        command = new Command(CommandCode.REPEAT_END, []);\n                        repeatOpen = false;\n                    }\n                    break;\n            }\n\n            if (command) {\n                this.commands.push(command);\n                this.lineNumbers.push(lineNumber);\n                switch (this.input.token.type) {\n                    case TokenType.SEMICOLON:\n                        command.terminator = TerminatorType.SINGLE_STEP;\n                        break;\n                    case TokenType.COMMA:\n                        command.terminator = TerminatorType.MINI_STEP;\n                        break;\n                }\n            }\n\n            // TODO: may not need this in the end, but I seem to need it now\n            // I senese trouble ahead\n            command = null;\n        }\n\n        command = new Command(CommandCode.END, []);\n        this.commands.push(command);\n        this.lineNumbers.push(lineNumber);\n    }\n\n    createOutputFileCommand(): Command {\n        this.input.advance();\n        const args: string[] = this.readArgs(1);\n        return new Command(CommandCode.OUTPUT_FILE, args);\n    }\n\n    createOutputCommand(): Command {\n        this.input.advance();\n        return new Command(CommandCode.OUTPUT, []);\n    }\n\n    createCompareToCommand(): Command | never {\n        this.input.advance();\n        const args: string[] = this.readArgs(1);\n        return new Command(CommandCode.COMPARE_TO, args);\n    }\n\n    createOutputListCommand(): Command | never {\n        this.input.advance();\n        const args: string[] = this.readArgs(20);\n\n        let count;\n        for (count=0; count<args.length && args[count] !== undefined; count++);\n\n        const vars: VariableFormat[] = new Array(count);\n\n        for (let i=0; i<count; i++) {\n            let percentPos = args[i].indexOf('%');\n            if (percentPos === -1) {\n                percentPos = args[i].length;\n                args[i] += \"%B1.1.1\";\n            }\n\n            const varName = args[i].substring(0, percentPos);\n            const format = args[i].charAt(percentPos+1);\n\n            let dotPos1 = args[i].indexOf('.', percentPos);\n            if (dotPos1 === -1) {\n                throw new Error(\"Missing '.'\");\n            }\n            let padL = parseInt(args[i].substring(percentPos + 2, dotPos1));\n\n            let dotPos2 = args[i].indexOf('.', dotPos1+1);\n            if (dotPos2 === -1) {\n                throw new Error(\"Missing '.'\");\n            }\n            const len = parseInt(args[i].substring(dotPos1+1, dotPos2));\n            const padR = parseInt(args[i].substring(dotPos2+1));\n\n            vars[i] = new VariableFormat(varName, format, padL, padR, len);\n        }\n\n        return new Command(CommandCode.OUTPUT_LIST, vars);\n    }\n\n    createRepeatCommand(): Command | never {\n        this.input.advance();\n        if (this.input.token.type !== TokenType.LBRACE) {\n            this.input.fail(\"Missing '{' in repeat command\");\n        }\n        return new Command(CommandCode.REPEAT, []);\n    }\n}\n","import { UserWorkspace } from \"../gates/composite-gateclass\";\nimport { Gate } from \"../gates/gate\";\nimport { HardwareSimulator } from \"../simulators/hardware-simulator\";\nimport { Command, CommandCode, Script, TerminatorType, VariableFormat } from \"./script\";\n\nexport class HackController {\n    simulator: HardwareSimulator;\n\n    script: Script | null;\n    currentCommandIndex: number;\n    loopCommandIndex: number;\n\n    varList: VariableFormat[];\n\n    output: string;\n    outputLinesCounter: number;\n\n    compare: string[];\n    compareLinesCounter: number;\n    comparisonFailed: boolean;\n    comparisonFailureLine: number;\n\n    userWorkspace: UserWorkspace;\n\n    displayMessage: (message: string, error: boolean) => void;\n    setTestScriptLine: (line: number) => void;\n\n    fastForwardRunning: boolean;\n    fastForwardInterval: NodeJS.Timeout | null ;\n\n    constructor(simulator: HardwareSimulator, displayMessage: (_:string) => void, setTestScriptLine: (_:number) => void) {\n        this.simulator = simulator;\n        this.displayMessage = (m, e) => displayMessage(m);\n        this.setTestScriptLine = setTestScriptLine;\n\n        this.script = null;\n\n        this.currentCommandIndex = 0;\n        this.loopCommandIndex = 0;\n\n        this.varList = [];\n\n        this.output = '';\n        this.outputLinesCounter = 0;\n\n        this.compare = [];\n        this.compareLinesCounter = 0;\n        this.comparisonFailed = false;\n        this.comparisonFailureLine = 0;\n\n        this.fastForwardRunning = false;\n        this.fastForwardInterval = null;\n\n        this.userWorkspace = new Map();\n    }\n\n    getGate(): Gate | null {\n        return this.simulator.gate;\n    }\n\n    loadGate(gateName: string, userWorkspace: UserWorkspace) {\n        // TODO: this is me being lazy\n        this.userWorkspace = userWorkspace;\n        this.simulator.loadGate(gateName, userWorkspace);\n    }\n\n    loadScript(scriptName: string, userWorkspace: UserWorkspace) {\n        // TODO: this is me being lazy\n        this.userWorkspace = userWorkspace;\n        const testScript = userWorkspace.get(scriptName) ?? \"tick; tock;\";\n        this.script = new Script(testScript);\n        this.currentCommandIndex = 0;\n        this.setTestScriptLine(this.script.lineNumbers[0]);\n        this.output = '';\n        this.compare = []\n        this.displayMessage(\"New script loaded \" + scriptName, false);\n    }\n\n    setInputPin(pinNumber: number, value: number) {\n        this.simulator.setInputPin(pinNumber, value);\n    }\n\n    singleStep() {\n        this.displayMessage('', false);\n        let terminatorType: TerminatorType | undefined\n        do {\n            terminatorType = this.miniStep();\n        } while (terminatorType === TerminatorType.MINI_STEP);\n        this.setTestScriptLine(this.script?.lineNumbers[this.currentCommandIndex] ?? -1);\n    }\n\n    fastForward() {\n        this.displayMessage('', false);\n        this.fastForwardRunning = true;\n        /* TODO: use this for noAnimation mode\n        while (this.fastForwardRunning) {\n            this.singleStep();\n        }\n        */\n       this.fastForwardInterval = setInterval(() => { this.singleStep(); }, 500);\n    }\n\n    stop() {\n        if (this.fastForwardRunning && this.fastForwardInterval) {\n            this.fastForwardRunning = false;\n            clearInterval(this.fastForwardInterval);\n        }\n    }\n\n    resetOutput() {\n        this.output = '';\n        this.outputLinesCounter = 0\n    }\n\n    resetCompare() {\n        this.compareLinesCounter = 0;\n        this.comparisonFailed = false;\n    }\n\n    restart() {\n        this.simulator.restart();\n        this.resetOutput();\n        this.resetCompare();\n        this.currentCommandIndex = 0;\n        this.setTestScriptLine(this.script?.lineNumbers[0] ?? -1);\n    }\n\n    miniStep(): TerminatorType | undefined {\n        let redo = false;\n        let command: Command | undefined\n\n        do {\n            command = this.script?.getCommandAt(this.currentCommandIndex);\n            if (!command) { throw new Error(\"No command found.\"); } // TODO: rm\n            redo = false;\n\n            switch (command.code) {\n                case CommandCode.SIMULATOR:\n                    this.simulator.doCommand(command.getArg());\n                    break;\n                case CommandCode.OUTPUT_FILE:\n                    // set current output file name\n                    // clear output file\n                    this.resetOutput();\n                    break;\n                case CommandCode.COMPARE_TO:\n                    // set compare to file name\n                    this.compare = this.userWorkspace.get(command.getArg()[0])?.split('\\n') ?? [];\n                    this.resetCompare();\n                    break;\n                case CommandCode.OUTPUT_LIST:\n                    this.doOutputListCommand(command);\n                    break;\n                case CommandCode.OUTPUT:\n                    this.doOutputCommand(command);\n                    break;\n                case CommandCode.REPEAT:\n                    this.loopCommandIndex = this.currentCommandIndex + 1;\n                    redo = true;\n                    break;\n                case CommandCode.END:\n                    this.stop();\n                    if (this.compare) {\n                        if (this.comparisonFailed) {\n                            this.displayMessage(`End of script - Comparison failure at line ${this.comparisonFailureLine}`, true);\n                        } else {\n                            this.displayMessage(`End of script - Comparison ended successfully`, false);\n                        }\n                    } else {\n                        this.displayMessage('End of script', false);\n                    }\n                    break;\n            }\n\n            if (command.code !== CommandCode.END) {\n                this.currentCommandIndex++;\n                this.setTestScriptLine(this.currentCommandIndex);\n                const nextCommand = this.script?.getCommandAt(this.currentCommandIndex);\n                if (nextCommand?.code === CommandCode.REPEAT_END) {\n                    this.currentCommandIndex = this.loopCommandIndex;\n                    this.setTestScriptLine(this.currentCommandIndex);\n                }\n            }\n        } while (redo);\n\n        if (!command) { throw new Error(\"No command found.\"); } // TODO: rm\n\n        return command.terminator\n    }\n\n    doOutputCommand(command: Command) {\n        let line = '|';\n        for (let i=0; i<this.varList.length; i++) {\n            const vars = this.varList[i];\n            let value: string = this.simulator.getValue(vars.varName);\n            if (vars.format !== 'S') {\n                let numValue: number = parseInt(value);\n                if (vars.format === 'B') {\n                    value = numValue.toString(2).padStart(16, '0');\n                }\n            }\n            if (value.length > vars.len) {\n                value = value.substring(value.length - vars.len);\n            }\n            line += ' '.repeat(vars.padL) + value + ' '.repeat(vars.padR) + '|';\n        }\n        this.outputAndCompare(line);\n    }\n\n    doOutputListCommand(command: Command) {\n        this.varList = command.getArg();\n        let line = '|';\n        for (let i=0; i<this.varList.length; i++) {\n            const vars = this.varList[i];\n            const space = vars.padL + vars.padR + vars.len;\n            const varName = vars.varName.length > space ? vars.varName.substring(0, space) : vars.varName;\n            const leftSpace = Math.floor((space - varName.length)/2);\n            const rightSpace = space - leftSpace - varName.length;\n            line += ' '.repeat(leftSpace) + varName + ' '.repeat(rightSpace) + '|';\n        }\n        this.outputAndCompare(line);\n    }\n\n    outputAndCompare(line: string) {\n        this.output += line + '\\n';\n        this.outputLinesCounter++;\n\n        if (this.compare.length > 0) {\n            const compareLine = this.compare[this.compareLinesCounter];\n            this.compareLinesCounter++;\n\n            if (!this.compareLine(line, compareLine)) {\n                this.comparisonFailed = true;\n                this.comparisonFailureLine = this.compareLinesCounter;\n                this.displayMessage(`Comparison failure at line ${this.comparisonFailureLine}`, true);\n            }\n        }\n    }\n\n    compareLine(line: string, compareLine: string): boolean {\n        return compareLine.trim() === line;\n    }\n}\n","import React, { useCallback, useEffect, useRef, useState } from \"react\"\nimport { CompositeGate } from \"./../../gates/composite-gate\"\nimport { CompositeGateClass, UserWorkspace } from \"./../../gates/composite-gateclass\"\nimport { PinInfo, PinType } from \"./../../gates/gateclass\"\nimport { Actions } from \"./actions\"\nimport { HDLViewer } from \"./hdl-viewer\"\nimport { Pins } from \"./pins\"\nimport { StatusMessage } from \"./status-message\"\nimport { HardwareSimulator } from \"../../simulators/hardware-simulator\"\nimport { Gate } from \"../../gates/gate\"\nimport { TestScript } from \"./test-script\"\nimport { HackController } from \"../../controller/controller\"\n\nexport type PinUpdate = {\n  value: string\n  number: number\n  type: PinType\n}\n\nexport type PinData = {\n  name: string\n  value: string\n}\n\nexport type AllPinData = {\n  input: PinData[],\n  output: PinData[],\n  internal: PinData[]\n}\n\nexport default function HardwareSimulatorUI() {\n  const [userWorkspace, setUserWorkspace] = useState<UserWorkspace | null>(null)\n  const [gateFilename, setGateFilename] = useState<string | null>(null)\n\n  const [testScript, setTestScript] = useState<string | null>(\"default.tst\")\n  const [testScriptLine, setTestScriptLine] = useState<number | null>(null);\n\n  const [pinData, setPinData] = useState<AllPinData>({ input: [], output: [], internal: [] })\n  const [status, setStatus] = useState<string | null>(null)\n\n  const [format, setFormat] = useState<string>(\"decimal\")\n\n  const controller = useRef(new HackController(new HardwareSimulator(setGateFilename), setStatus, setTestScriptLine))\n\n  // update UI\n  const updatePinData = useCallback(() => {\n    const gate = controller.current.getGate()\n    if (!gate) {\n      throw new Error(\"updatePinData: gate can not be null\")\n    }\n    const input = getPinData(gate, PinType.INPUT)\n    const output = getPinData(gate, PinType.OUTPUT)\n    const internal = getPinData(gate, PinType.INTERNAL)\n    setPinData({ input, output, internal })\n  }, [])\n\n  // parse hdl file contents into gate\n  useEffect(() => {\n    if (!gateFilename || !userWorkspace) { return }\n    if (!gateFilename.endsWith(\".hdl\")) { return }\n    const gateName = gateFilename.slice(0, -4)\n    try {\n      controller.current.loadGate(gateName, userWorkspace)\n      updatePinData()\n      setStatus(\"Loaded successfully!\")\n    } catch (error) {\n      setStatus(`${error}`)\n    }\n  }, [gateFilename, userWorkspace, updatePinData])\n\n  // set up test script\n  useEffect(() => {\n    if (!testScript || !userWorkspace) { return; }\n    controller.current.loadScript(testScript, userWorkspace)\n  }, [testScript, userWorkspace]);\n\n  // step forward one time unit\n  const singleStep = useCallback(() => {\n    controller.current.singleStep();\n    updatePinData();\n  }, [updatePinData]);\n\n  const fastForward = useCallback(() => {\n    controller.current.fastForward();\n    updatePinData();\n  }, [updatePinData]);\n\n  const stop = useCallback(() => {\n    controller.current.stop();\n  }, []);\n\n  const restart = useCallback(() => {\n    controller.current.restart()\n    updatePinData()\n  }, [updatePinData])\n\n  // set input pin\n  const updateInputPin = useCallback(({ value, number, type }: PinUpdate) => {\n    // can only update input pins\n    if (type !== PinType.INPUT) { return }\n    controller.current.setInputPin(number, parseInt(value) || 0)\n    updatePinData()\n  }, [updatePinData])\n\n  let hdl = \"No hdl file\"\n  if (userWorkspace && gateFilename) {\n    hdl = userWorkspace.get(gateFilename) ?? \"\"\n  }\n\n  userWorkspace?.set(\"default.tst\", \"repeat {\\n    tick,\\n    tock;\\n}\")\n  // userWorkspace?.set(\"default.tst\", \"tick;\\ntock;\\ntick;\\n\")\n  const displayScript = (testScript ? userWorkspace?.get(testScript) : null) ?? \"No test found\"\n\n  return (\n    <div id=\"hardwareSimulator\">\n      <div className=\"header\">\n        <h1>HardwareSimulator</h1>\n      </div>\n      <Actions\n        hdlFilename={gateFilename}\n        setHDLFileName={setGateFilename}\n        userWorkspace={userWorkspace}\n        setUserWorkspace={setUserWorkspace}\n        testScript={testScript}\n        setTestScript={setTestScript}\n        setFormat={setFormat}\n        singleStep={singleStep}\n        fastForward={fastForward}\n        stop={stop}\n        restart={restart} />\n      <div className=\"container\">\n        <Pins title=\"Input Pins\" type={PinType.INPUT} pinData={pinData.input} updatePin={updateInputPin} format={format} />\n        <Pins title=\"Output Pins\" type={PinType.OUTPUT} pinData={pinData.output} updatePin={updateInputPin} format={format} />\n        <HDLViewer hdl={hdl} />\n        <Pins title=\"Internal Pins\" type={PinType.INTERNAL} pinData={pinData.internal} updatePin={updateInputPin} format={format} />\n        <TestScript script={displayScript} currentLine={testScriptLine} />\n      </div>\n      <StatusMessage status={status} />\n    </div>\n  )\n}\n\nexport function getPinData(gate: Gate, pinType: PinType): PinData[] | never {\n  let pinInfo: PinInfo[] = []\n  switch (pinType) {\n    case PinType.INPUT:\n      pinInfo = gate.gateClass.inputPinsInfo\n      return gate.inputPins.map((node, i) => ({name: pinInfo[i].name, value: node.value[0].toString()}))\n    case PinType.OUTPUT:\n      pinInfo = gate.gateClass.outputPinsInfo\n      return gate.outputPins.map((node, i) => ({name: pinInfo[i].name, value: node.value[0].toString()}))\n    case PinType.INTERNAL:\n      const compositeGate = gate as CompositeGate\n      if (!compositeGate) return []\n      const compositeClass = compositeGate.gateClass as CompositeGateClass\n      if (!compositeClass) return []\n      pinInfo = compositeClass.internalPinsInfo\n      return compositeGate.internalPins.map((node, i) => ({name: pinInfo[i].name, value: node.value[0].toString()}))\n    default:\n      throw new Error(`pinType is ${pinType}`)\n  }\n}\n","import React from 'react'\nimport './App.css'\nimport HardwareSimulatorUI from './hack/guis/hardware-simulator'\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <HardwareSimulatorUI />\n    </div>\n  )\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}