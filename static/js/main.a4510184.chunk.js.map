{"version":3,"sources":["hack/gates/gateclass.ts","hack/guis/hardware-simulator/actions.tsx","hack/guis/hardware-simulator/hdl-viewer.tsx","hack/guis/hardware-simulator/pins.tsx","hack/guis/hardware-simulator/status-message.tsx","hack/hdl/tokenizer.ts","hack/hdl/parser.ts","hack/gates/gate.ts","hack/gates/builtin-gate.ts","hack/gates/builtins/logic.ts","hack/gates/builtins/arithmetic.ts","hack/gates/builtins/memory.ts","hack/gates/builtins/computer.ts","hack/gates/builtins/index.ts","hack/gates/node.ts","hack/gates/builtin-gateclass.ts","hack/gates/connection.ts","hack/gates/composite-gate.ts","hack/gates/composite-gateclass.ts","hack/gates/index.ts","hack/simulators/hardware-simulator.ts","hack/guis/hardware-simulator/test-script.tsx","hack/guis/hardware-simulator/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PinType","GateClass","name","inputPinsInfo","outputPinsInfo","namesToTypes","namesToNumbers","isClocked","isInputClocked","isOutputClocked","this","registerPins","INPUT","OUTPUT","pinType","pinNumber","length","pinName","UNKNOWN","pinInfos","type","forEach","pinInfo","i","registerPin","Actions","hdlFilename","setHDLFileName","userWorkspace","setUserWorkspace","testScript","setTestScript","singleStep","setFormat","setWorkingDirectory","useCallback","e","a","files","target","Error","newUserWorkspace","Map","file","endsWith","firstHDLFile","text","set","scripts","Array","from","keys","filter","hdls","className","webkitdirectory","directory","mozdirectory","onChange","value","undefined","map","filename","onClick","HDLViewer","hdl","Pins","title","pinData","updatePin","format","number","data","displayValue","int","parseInt","toString","formatValue","StatusMessage","status","TokenType","HDLError","HDLTokenizer","input","readpos","pos","cur","keywords","token","literal","CHIP","IN","OUT","PARTS","BUILTIN","CLOCKED","true","TRUE","false","FALSE","readChar","EOF","skipWhitespaceAndComments","LBRACE","RBRACE","LPAREN","RPAREN","LBRACKET","RBRACKET","EQUAL","COMMA","DOT","COLON","SEMICOLON","isLetter","ident","readIdentifier","lookupIdentifier","isDigit","INT","readNumber","message","fail","IDENTIFIER","substring","inSlashComment","inStarComment","peek","peekChar","char","n","charCodeAt","HDLParser","advance","tokenIs","failMessage","peekTokenIs","types","includes","Gate","inputPins","outputPins","gateClass","getPinType","index","getPinNumber","console","log","doEval","clockUp","clockDown","reCompute","BuiltInGate","Not","_in","get","Not16","And","b","Xor","gates","Or","Mux","sel","Mux4Way16","c","d","out","Mux8Way16","f","g","h","DMux","DMux4Way","DMux8Way","Or8Way","HalfAdder","FullAdder","sum","Add16","Inc16","ALU","x","y","result","Bit","state","Register","PC","load","inc","RAM","size","values","Uint16Array","address","RAM8","RAM64","RAM512","RAM4K","RAM16K","Screen","Keyboard","key","ROM32K","SIZE","builtins","Nand","gate","DFF","logic","And16","Or16","Mux16","arithmetic","memory","computer","Node","connections","node","Set","add","delete","SubNode","low","high","mask","shiftRight","getMask","SubBusListeningAdapter","shiftLeft","masked1","masked2","POWERS_OF_2","bitHolder","ConnectionType","BuiltInGateClass","parser","tsClassName","expectPeek","clockedPins","readPinsInfo","inputFound","outputFound","j","inputNodes","_","outputNodes","CompositeGate","internalPins","parts","eval","tock","tick","INTERNAL","CompositeGateClass","userDefinedParts","partsList","internalPinsInfo","readParts","subNode","partClass","newInstance","internalNodes","internalConnections","partNode","gateSubBus","partSubBus","connection","partNumber","getNode","partPinName","FROM_INPUT","connectGateToPart","gatePinNumber","TO_OUTPUT","TO_INTERNAL","connect","FROM_INTERNAL","FROM_TRUE","FROM_FALSE","source","sourceNode","sourceSubBus","targetNode","targetSubBus","endOfParts","hasMoreTokens","partName","getGateClass","push","readPinNames","endOfPins","leftName","leftSubBus","readSubBus","rightPinPossibilities","expectPeekOneOf","rightName","rightSubBus","addConnection","partGateClass","leftType","rightPinInfo","leftNumber","leftPinInfo","getPinInfo","leftWidth","width","rightType","rightNumber","selfFittingWidth","connectionType","INVALID","rightWidth","hdlFileName","has","getGateClassHDL","getGateClassBuiltIn","tokenizer","expectCurrent","gateName","readHDL","exit","pinWidth","HardwareSimulator","performTock","performTick","TestScript","script","HardwareSimulatorUI","useState","gateFilename","setGateFilename","output","internal","setPinData","setStatus","simulator","useRef","updatePinData","current","getPinData","useEffect","slice","loadGate","error","step","updateInputPin","setInputPin","displayScript","id","compositeGate","compositeClass","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4510184.chunk.js","sourcesContent":["import { Gate } from \"./gate\"\n\nexport enum PinType {\n    INPUT = \"INPUT\",\n    OUTPUT = \"OUTPUT\",\n    INTERNAL = \"INTERNAL\",\n    UNKNOWN = \"UNKNOWN\"\n}\n\nexport type PinInfo = {\n    name: string\n    width: number\n}\n\nexport abstract class GateClass {\n    namesToTypes: { [_: string]: PinType }\n    namesToNumbers: { [_: string]: number }\n\n    name: string\n\n    inputPinsInfo: PinInfo[]\n    outputPinsInfo: PinInfo[]\n\n    isClocked: boolean\n    isInputClocked: boolean[]\n    isOutputClocked: boolean[]\n\n    constructor(name: string, inputPinsInfo: PinInfo[], outputPinsInfo: PinInfo[]) {\n        this.name = name\n        this.namesToTypes = {}\n        this.namesToNumbers = {}\n\n        this.inputPinsInfo = inputPinsInfo\n        this.registerPins(inputPinsInfo, PinType.INPUT)\n        this.outputPinsInfo = outputPinsInfo\n        this.registerPins(outputPinsInfo, PinType.OUTPUT)\n\n        this.isClocked = false\n        this.isInputClocked = []\n        this.isOutputClocked = []\n    }\n\n    abstract newInstance(): Gate\n\n    getPinInfo(pinType: PinType, pinNumber: number): PinInfo | null {\n        switch (pinType) {\n            case PinType.INPUT:\n                if (pinNumber < this.inputPinsInfo.length) {\n                return this.inputPinsInfo[pinNumber]\n            }\n            break\n            case PinType.OUTPUT:\n                if (pinNumber < this.outputPinsInfo.length) {\n                return this.outputPinsInfo[pinNumber]\n            }\n            break\n        }\n        return null\n    }\n\n    getPinType(pinName: string): PinType {\n        return this.namesToTypes[pinName] ?? PinType.UNKNOWN\n    }\n\n    getPinNumber(pinName: string): number {\n        return this.namesToNumbers[pinName] ?? -1\n    }\n\n    registerPins(pinInfos: PinInfo[], type: PinType) {\n        pinInfos.forEach((pinInfo, i) => {\n            this.registerPin(pinInfo, type, i)\n        })\n    }\n\n    registerPin(pinInfo: PinInfo, type: PinType, pinNumber: number) {\n        this.namesToTypes[pinInfo.name] = type\n        this.namesToNumbers[pinInfo.name] = pinNumber\n    }\n}\n","import { AriaAttributes, ChangeEvent, DOMAttributes, useCallback } from \"react\"\nimport { UserWorkspace } from \"../../gates/composite-gateclass\"\n\nexport type ActionsProps = {\n  hdlFilename: string | null\n  setHDLFileName: (_: string | null) => void\n  userWorkspace: UserWorkspace | null\n  setUserWorkspace: (_: UserWorkspace | null) => void\n  testScript: string | null\n  setTestScript: (_: string | null) => void\n  singleStep: () => void\n  setFormat: (_: string) => void\n}\n\nexport function Actions({ hdlFilename, setHDLFileName, userWorkspace, setUserWorkspace, testScript, setTestScript, singleStep, setFormat }: ActionsProps) {\n  // TODO: make a better approach\n  const setWorkingDirectory = useCallback(async (e: ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files\n    if (!files) {\n      throw new Error(\"no files found\")\n    }\n    let newUserWorkspace = new Map<string, string>()\n    let firstHDLFile\n    for (let i=0; i<files.length; i++) {\n      const file = files[i]\n      if (file.name.endsWith(\".hdl\") && !firstHDLFile) {\n        firstHDLFile = file\n      }\n      newUserWorkspace.set(file.name, await file.text())\n    }\n    setUserWorkspace(newUserWorkspace)\n    if (firstHDLFile) {\n      setHDLFileName(firstHDLFile.name)\n    }\n  }, [setHDLFileName, setUserWorkspace])\n\n  const scripts = Array.from(userWorkspace?.keys() ?? [])\n    .filter((file) => file.endsWith(\".tst\"))\n  const hdls = Array.from(userWorkspace?.keys() ?? [])\n    .filter((file) => file.endsWith(\".hdl\"))\n\n  return (\n    <div className=\"actions\">\n      <input type=\"file\" webkitdirectory=\"\" directory=\"\" mozdirectory=\"\" onChange={setWorkingDirectory} />\n      <select value={hdlFilename ?? undefined} onChange={(e) => setHDLFileName(e.target.value)}>\n        {hdls.map((filename) => (<option key={filename} value={filename}>{filename}</option>))}\n      </select>\n      <select value={testScript ?? undefined} onChange={(e) => setTestScript(e.target.value)}>\n        {scripts.map((filename) => (<option key={filename} value={filename}>{filename}</option>))}\n      </select>\n      <select onChange={(e) => setFormat(e.target.value)}>\n        <option key=\"decimal\" value=\"decimal\">Decimal</option>\n        <option key=\"binary\" value=\"binary\">Binary</option>\n        <option key=\"hexadecimal\" value=\"hexadecimal\">Hexadecimal</option>\n      </select>\n      <button onClick={singleStep}>Single Step</button>\n    </div>\n  )\n}\n\ndeclare module \"react\" {\n  interface HTMLAttributes<T> extends AriaAttributes, DOMAttributes<T> {\n    directory?: string\n    webkitdirectory?: string\n    mozdirectory?: string\n  }\n}\n","export type HDLViewerProps = {\n  hdl: string | null\n}\n\nexport function HDLViewer({ hdl }: HDLViewerProps) {\n  return (<div className=\"hdlViewer\"><pre>{hdl}</pre></div>)\n}\n","import { useCallback } from \"react\"\nimport { PinData, PinUpdate } from \".\"\nimport { PinType } from \"../../gates/gateclass\"\n\nexport type PinsProps = {\n  title: string\n  type: PinType\n  pinData: PinData[]\n  updatePin: (data: PinUpdate) => void\n  format: string\n}\n\nexport function Pins({ title, type, pinData, updatePin, format }: PinsProps) {\n  const onChange = useCallback((value: string, number: number, type: PinType) => {\n    updatePin({ value, number, type })\n  }, [updatePin])\n\n  return (\n    <div className=\"pins\">\n      <h3>{title}</h3>\n      <table>\n        <tbody>\n          {pinData.map((data, i) => {\n            const { name, value } = data\n            const displayValue = type === PinType.INPUT ? value : formatValue(value, format)\n            return (<tr key={i}>\n                    <td>{name}</td>\n                    <td><input value={displayValue} onChange={(e) => onChange(e.target.value, i, type)} /></td>\n                    </tr>)\n          })}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport function formatValue(value: string, format: string): string {\n  const int = parseInt(value) ?? 0\n  switch (format) {\n    case \"binary\":\n      return int.toString(2)\n    case \"hexadecimal\":\n      return int.toString(16)\n    default:\n      return int.toString()\n  }\n}\n","export type StatusMessageProps = {\n  status: string | null\n}\n\nexport function StatusMessage({ status }: StatusMessageProps) {\n  return (<div className=\"statusMessage\">{status}</div>)\n}\n","export enum TokenType {\n  IDENTIFIER = 'IDENTIFIER',\n\n  TRUE = 'true',\n  FALSE = 'false',\n  CHIP = 'CHIP',\n  IN = 'IN',\n  OUT = 'OUT',\n  PARTS = 'PARTS',\n  BUILTIN = 'BUILTIN',\n  CLOCKED = 'CLOCKED',\n\n  INT = 'INT',\n  LBRACE = 'LBRACE',\n  RBRACE = 'RBRACE',\n  LBRACKET = 'LBRACKET',\n  RBRACKET = 'RBRACKET',\n  LPAREN = 'LPAREN',\n  RPAREN = 'RPAREN',\n  COLON = 'COLON',\n  EQUAL = 'EQUAL',\n  COMMA = 'COMMA',\n  SEMICOLON = 'SEMICOLON',\n  DOT = 'DOT',\n  INVALID = 'INVALID',\n\n  EOF = 'EOF',\n}\n\nexport class HDLError extends Error {}\n\nexport type Token = {\n  type: TokenType | null\n  literal: string | null\n}\n\nexport class HDLTokenizer {\n  private input: string\n  private readpos: number\n  private pos: number\n  private cur: string\n  private keywords: { [_: string]: TokenType }\n\n  // current token\n  token: Token = { type: null, literal: null }\n\n  constructor (input: string) {\n    this.input = input\n    this.readpos = 0\n    this.pos = 0\n    this.cur = ''\n    this.keywords = {\n      CHIP: TokenType.CHIP,\n      IN: TokenType.IN,\n      OUT: TokenType.OUT,\n      PARTS: TokenType.PARTS,\n      BUILTIN: TokenType.BUILTIN,\n      CLOCKED: TokenType.CLOCKED,\n      true: TokenType.TRUE,\n      false: TokenType.FALSE\n    }\n\n    this.readChar()\n  }\n\n  hasMoreTokens (): boolean {\n    return this.token.type !== TokenType.EOF\n  }\n\n  advance () {\n    this.skipWhitespaceAndComments()\n\n    this.token.literal = this.cur\n    switch (this.cur) {\n      case '{':\n        this.token.type = TokenType.LBRACE\n        break\n      case '}':\n        this.token.type = TokenType.RBRACE\n        break\n      case '(':\n        this.token.type = TokenType.LPAREN\n        break\n      case ')':\n        this.token.type = TokenType.RPAREN\n        break\n      case '[':\n        this.token.type = TokenType.LBRACKET\n        break\n      case ']':\n        this.token.type = TokenType.RBRACKET\n        break\n      case '=':\n        this.token.type = TokenType.EQUAL\n        break\n      case ',':\n        this.token.type = TokenType.COMMA\n        break\n      case '.':\n        this.token.type = TokenType.DOT\n        break\n      case ':':\n        this.token.type = TokenType.COLON\n        break\n      case ';':\n        this.token.type = TokenType.SEMICOLON\n        break\n      case '':\n        this.token.type = TokenType.EOF\n        break\n      default:\n        if (isLetter(this.cur)) {\n          const ident = this.readIdentifier()\n          this.token.type = this.lookupIdentifier(ident)\n          this.token.literal = ident\n          return\n        } else if (isDigit(this.cur)) {\n          this.token.type = TokenType.INT\n          this.token.literal = this.readNumber()\n          return\n        }\n    }\n\n    this.readChar()\n  }\n\n  fail (message: string): never {\n    HDLTokenizer.fail(message)\n  }\n\n  static fail (message: string): never {\n    throw new HDLError(message)\n  }\n\n  private lookupIdentifier (ident: string): TokenType {\n    return this.keywords[ident] ?? TokenType.IDENTIFIER\n  }\n\n  private readIdentifier (): string {\n    const pos = this.pos\n    while (isLetter(this.cur) || isDigit(this.cur)) {\n      this.readChar()\n    }\n    return this.input.substring(pos, this.pos)\n  }\n\n  private readNumber (): string {\n    const pos = this.pos\n    while (isDigit(this.cur)) {\n      this.readChar()\n    }\n    return this.input.substring(pos, this.pos)\n  }\n\n  private readChar () {\n    this.cur = this.readpos >= this.input.length ? '' : this.input[this.readpos]\n    this.pos = this.readpos\n    this.readpos++\n  }\n\n  private peekChar () {\n    return this.readpos >= this.input.length ? '' : this.input[this.readpos]\n  }\n\n  private skipWhitespaceAndComments () {\n    let inSlashComment = false\n    let inStarComment = false\n\n    while (true) {\n      const peek = this.peekChar()\n\n      // isSlashCommentStart\n      if (this.cur === '/' && peek === '/') {\n        inSlashComment = true\n        this.readChar() // read peek as well\n        // isSlashCommentEnd\n      } else if (inSlashComment && this.cur === '\\n') {\n        inSlashComment = false\n        // isStarCommentStart\n      } else if (this.cur === '/' && peek === '*') {\n        inStarComment = true\n        this.readChar() // read peek as well\n        // isStarCommentEnd\n      } else if (inStarComment && (this.cur === '*' && peek === '/')) {\n        inStarComment = false\n        this.readChar() // read peek as well\n      } else if (!inSlashComment && !inStarComment && !(this.cur === ' ' || this.cur === '\\t' ||\n                                                        this.cur === '\\n' || this.cur === '\\r')) {\n        return\n      }\n\n      this.readChar()\n    }\n  }\n}\n\nfunction isLetter (char: string): boolean {\n  const n = char.charCodeAt(0)\n  return (n >= 65 && n < 91) || (n >= 97 && n < 123)\n}\n\nfunction isDigit (char: string): boolean {\n  const n = char.charCodeAt(0)\n  return (n >= 48 && n < 58)\n}\n\n","import { HDLTokenizer, Token, TokenType } from \"./tokenizer\";\n\nexport class HDLParser {\n  private input: HDLTokenizer\n\n  token: Token = { literal: null, type: null }\n  peek: Token = { literal: null, type: null }\n\n  constructor(input: HDLTokenizer) {\n    this.input = input\n    this.advance()\n    this.advance()\n  }\n\n  advance () {\n    this.token = {...this.peek}\n    this.input.advance()\n    this.peek = {...this.input.token}\n  }\n\n  hasMoreTokens (): boolean {\n    return !this.tokenIs(TokenType.EOF)\n  }\n\n  tokenIs (type: TokenType): boolean {\n    return this.token.type === type\n  }\n\n  peekTokenIs (type: TokenType): boolean {\n    return this.peek.type === type\n  }\n\n  expectCurrent (type: TokenType, failMessage: string) {\n    if (!this.tokenIs(type)) {\n      this.fail(failMessage)\n    }\n  }\n\n  expectPeek (type: TokenType, failMessage: string): void | never {\n    if (this.peekTokenIs(type)) {\n      this.advance()\n    } else {\n      this.fail(failMessage)\n    }\n  }\n\n  expectPeekOneOf (types: TokenType[], failMessage: string): void | never {\n    if (this.peek.type && types.includes(this.peek.type)) {\n      this.advance()\n    } else {\n      this.fail(failMessage)\n    }\n  }\n\n  fail (message: string): never {\n    this.input.fail(message)\n  }\n\n  static fail (message: string): never {\n    HDLTokenizer.fail(message)\n  }\n}\n","import { GateClass, PinType } from \"./gateclass\"\nimport { Node } from \"./node\"\n\nexport abstract class Gate {\n    gateClass: GateClass\n    inputPins: Node[]\n    outputPins: Node[]\n\n    constructor(inputPins: Node[], outputPins: Node[], gateClass: GateClass) {\n        this.inputPins = inputPins\n        this.outputPins = outputPins\n        this.gateClass = gateClass\n    }\n\n    abstract reCompute(): void\n    abstract clockUp(): void\n    abstract clockDown(): void\n\n    getNode(name: string): Node | null {\n        const type = this.gateClass.getPinType(name)\n        const index = this.gateClass.getPinNumber(name)\n        switch (type) {\n            case PinType.INPUT:\n                return this.inputPins[index]\n            case PinType.OUTPUT:\n                return this.outputPins[index]\n        }\n        return null\n    }\n\n    tick() {\n        console.log(\"Gate tick()\")\n        this.doEval()\n        this.clockUp()\n    }\n\n    tock() {\n        console.log(\"Gate tock()\")\n        this.clockDown()\n        this.doEval()\n    }\n\n    eval() {\n        this.doEval()\n    }\n\n    doEval() {\n        this.reCompute()\n    }\n}\n\n","import { Gate } from \"./gate\";\n\nexport class BuiltInGate extends Gate {\n    reCompute() {}\n    clockUp() {}\n    clockDown() {}\n}\n","import { BuiltInGate } from \"./../builtin-gate\"\n\nexport class Not extends BuiltInGate {\n    reCompute() {\n        const _in = this.inputPins[0].get()\n        this.outputPins[0].set(1 - _in)\n    }\n}\n\nexport class Not16 extends BuiltInGate {\n    reCompute() {\n        const _in = this.inputPins[0].get()\n        this.outputPins[0].set(~_in)\n    }\n}\n\nexport class And extends BuiltInGate {\n    reCompute() {\n        const a = this.inputPins[0].get()\n        const b = this.inputPins[1].get()\n        this.outputPins[0].set(a & b)\n    }\n}\n\nexport class Xor extends BuiltInGate {\n    reCompute() {\n        const a = this.inputPins[0].get()\n        const b = this.inputPins[1].get()\n        this.outputPins[0].set(a ^ b)\n    }\n}\n\nexport class Or extends BuiltInGate {\n    reCompute() {\n        const a = this.inputPins[0].get()\n        const b = this.inputPins[1].get()\n        this.outputPins[0].set(a | b)\n    }\n}\n\nexport class Mux extends BuiltInGate {\n    reCompute() {\n        const a = this.inputPins[0].get()\n        const b = this.inputPins[1].get()\n        const sel = this.inputPins[2].get()\n        this.outputPins[0].set(sel === 0 ? a : b)\n    }\n}\n\nexport class Mux4Way16 extends BuiltInGate {\n    reCompute() {\n        const a = this.inputPins[0].get()\n        const b = this.inputPins[1].get()\n        const c = this.inputPins[2].get()\n        const d = this.inputPins[3].get()\n        const sel = this.inputPins[4].get()\n        let out = 0\n        switch (sel) {\n            case 0: out = a; break\n            case 1: out = b; break\n            case 2: out = c; break\n            case 3: out = d; break\n        }\n        this.outputPins[0].set(out)\n    }\n}\n\nexport class Mux8Way16 extends BuiltInGate {\n    reCompute() {\n        const a = this.inputPins[0].get()\n        const b = this.inputPins[1].get()\n        const c = this.inputPins[2].get()\n        const d = this.inputPins[3].get()\n        const e = this.inputPins[4].get()\n        const f = this.inputPins[5].get()\n        const g = this.inputPins[6].get()\n        const h = this.inputPins[7].get()\n        const sel = this.inputPins[8].get()\n        let out = 0\n        switch (sel) {\n            case 0: out = a; break\n            case 1: out = b; break\n            case 2: out = c; break\n            case 3: out = d; break\n            case 4: out = e; break\n            case 5: out = f; break\n            case 6: out = g; break\n            case 7: out = h; break\n        }\n        this.outputPins[0].set(out)\n    }\n}\n\nexport class DMux extends BuiltInGate {\n    reCompute() {\n        const _in = this.inputPins[0].get()\n        const sel = this.inputPins[1].get()\n        this.outputPins[0].set(sel === 0 ? _in : 0)\n        this.outputPins[1].set(sel === 0 ? 0 : _in)\n    }\n}\n\nexport class DMux4Way extends BuiltInGate {\n    reCompute() {\n        const _in = this.inputPins[0].get()\n        const sel = this.inputPins[1].get()\n        this.outputPins[0].set(sel === 0 ? _in : 0)\n        this.outputPins[1].set(sel === 1 ? _in : 0)\n        this.outputPins[2].set(sel === 2 ? _in : 0)\n        this.outputPins[3].set(sel === 3 ? _in : 0)\n    }\n}\n\nexport class DMux8Way extends BuiltInGate {\n    reCompute() {\n        const _in = this.inputPins[0].get()\n        const sel = this.inputPins[1].get()\n        this.outputPins[0].set(sel === 0 ? _in : 0)\n        this.outputPins[1].set(sel === 1 ? _in : 0)\n        this.outputPins[2].set(sel === 2 ? _in : 0)\n        this.outputPins[3].set(sel === 3 ? _in : 0)\n        this.outputPins[4].set(sel === 4 ? _in : 0)\n        this.outputPins[5].set(sel === 5 ? _in : 0)\n        this.outputPins[6].set(sel === 6 ? _in : 0)\n        this.outputPins[7].set(sel === 7 ? _in : 0)\n    }\n}\n\nexport class Or8Way extends BuiltInGate {\n    reCompute() {\n        const _in = this.inputPins[0].get()\n        this.outputPins[0].set(_in === 0 ? 0 : 1)\n    }\n}\n\nconst gates = {\n    Not,\n    Not16,\n    And,\n    Or,\n    Xor,\n    Mux,\n    Mux4Way16,\n    Mux8Way16,\n    DMux,\n    DMux4Way,\n    DMux8Way,\n    Or8Way\n}\n\nexport default gates\n","import { BuiltInGate } from \"./../builtin-gate\"\n\nexport class HalfAdder extends BuiltInGate {\n    reCompute() {\n        const a = this.inputPins[0].get()\n        const b = this.inputPins[1].get()\n        this.outputPins[0].set(a ^ b)\n        this.outputPins[1].set(a & b)\n    }\n}\n\nexport class FullAdder extends BuiltInGate {\n    reCompute() {\n        const a = this.inputPins[0].get()\n        const b = this.inputPins[1].get()\n        const c = this.inputPins[2].get()\n        const sum = a + b + c\n        this.outputPins[0].set(sum % 2)\n        this.outputPins[1].set(sum / 2)\n    }\n}\n\nexport class Add16 extends BuiltInGate {\n    reCompute() {\n        const a = this.inputPins[0].get()\n        const b = this.inputPins[1].get()\n        this.outputPins[0].set(a + b)\n    }\n}\n\nexport class Inc16 extends BuiltInGate {\n    reCompute() {\n        const a = this.inputPins[0].get()\n        this.outputPins[0].set(a + 1)\n    }\n}\n\nexport class ALU extends BuiltInGate {\n    reCompute() {\n        let x = this.inputPins[0].get()\n        let y = this.inputPins[1].get()\n        const zx = this.inputPins[2].get()\n        const nx = this.inputPins[3].get()\n        const zy = this.inputPins[4].get()\n        const ny = this.inputPins[5].get()\n        const f = this.inputPins[6].get()\n        const no = this.inputPins[7].get()\n\n        if (zx) { x = 0 }\n        if (nx) { x = ~x }\n        if (zy) { y = 0 }\n        if (ny) { y = ~y }\n        let result = f === 1 ? (x+y) : (x&y)\n        if (no) { result = ~result }\n\n        this.outputPins[0].set(result) // out\n        this.outputPins[1].set(result === 0 ? 1 : 0) // zr\n        this.outputPins[2].set(result < 0 ? 1 : 0) // ng\n    }\n}\n\nconst gates = { HalfAdder, FullAdder, Add16, Inc16, ALU }\n\nexport default gates\n","import { BuiltInGate } from \"./../builtin-gate\"\nimport { GateClass } from \"../gateclass\"\nimport { Node } from \"../node\"\n\nexport class Bit extends BuiltInGate {\n    state: number\n\n    constructor(inputPins: Node[], outputPins: Node[], gateClass: GateClass) {\n        super(inputPins, outputPins, gateClass)\n        this.state = 0\n    }\n\n    clockUp() {\n        const load = this.inputPins[1].get()\n        if (load === 1)\n            this.state = this.inputPins[0].get()\n    }\n\n    clockDown() {\n        this.outputPins[0].set(this.state)\n    }\n}\n\nexport class Register extends BuiltInGate {\n    state: number\n\n    constructor(inputPins: Node[], outputPins: Node[], gateClass: GateClass) {\n        super(inputPins, outputPins, gateClass)\n        this.state = 0\n    }\n\n    clockUp() {\n        const load = this.inputPins[1].get()\n        if (load === 1)\n            this.state = this.inputPins[0].get()\n    }\n\n    clockDown() {\n        this.outputPins[0].set(this.state)\n    }\n}\n\nexport class PC extends BuiltInGate {\n    value: number\n\n    constructor(inputPins: Node[], outputPins: Node[], gateClass: GateClass) {\n        super(inputPins, outputPins, gateClass)\n        this.value = 0\n    }\n\n    clockUp() {\n        const _in = this.inputPins[0].get()\n        const load = this.inputPins[1].get()\n        const inc = this.inputPins[2].get()\n        const reset = this.inputPins[3].get()\n        if (reset === 1)\n            this.value = 0\n        else if (load === 1)\n            this.value = _in\n        else if (inc === 1)\n            this.value++\n    }\n\n    clockDown() {\n        this.outputPins[0].set(this.value)\n    }\n}\n\nexport class RAM extends BuiltInGate {\n    size: number\n\n    values: Uint16Array\n\n    constructor(inputPins: Node[], outputPins: Node[], gateClass: GateClass, size: number) {\n        super(inputPins, outputPins, gateClass)\n        this.size = size\n        this.values = new Uint16Array(size)\n    }\n\n    clockUp() {\n        const _in = this.inputPins[0].get()\n        const load = this.inputPins[1].get()\n        const address = this.inputPins[2].get()\n        if (load === 1) {\n            this.values[address] = _in\n        }\n    }\n\n    clockDown() {\n        this.reCompute()\n    }\n\n    reCompute() {\n        const address = this.inputPins[2].get()\n        this.outputPins[0].set(this.values[address])\n    }\n}\n\nexport class RAM8 extends RAM {\n    constructor(inputPins: Node[], outputPins: Node[], gateClass: GateClass) {\n        super(inputPins, outputPins, gateClass, 8)\n    }\n}\n\nexport class RAM64 extends RAM {\n    constructor(inputPins: Node[], outputPins: Node[], gateClass: GateClass) {\n        super(inputPins, outputPins, gateClass, 64)\n    }\n}\n\nexport class RAM512 extends RAM {\n    constructor(inputPins: Node[], outputPins: Node[], gateClass: GateClass) {\n        super(inputPins, outputPins, gateClass, 512)\n    }\n}\n\nexport class RAM4K extends RAM {\n    constructor(inputPins: Node[], outputPins: Node[], gateClass: GateClass) {\n        super(inputPins, outputPins, gateClass, 4096)\n    }\n}\n\nexport class RAM16K extends RAM {\n    constructor(inputPins: Node[], outputPins: Node[], gateClass: GateClass) {\n        super(inputPins, outputPins, gateClass, 16384)\n    }\n}\n\nconst gates = { Bit, Register, PC, RAM, RAM8, RAM64, RAM512, RAM4K, RAM16K }\nexport default gates\n","import { BuiltInGate } from \"./../builtin-gate\"\nimport { GateClass } from \"../gateclass\"\nimport { Node } from \"../node\"\n\nexport class Screen extends BuiltInGate {\n    values: Uint16Array\n\n    constructor(inputPins: Node[], outputPins: Node[], gateClass: GateClass) {\n        super(inputPins, outputPins, gateClass)\n        this.values = new Uint16Array(32 * 256)\n    }\n\n    clockUp() {\n        const _in = this.inputPins[0].get()\n        const load = this.inputPins[1].get()\n        const address = this.inputPins[2].get()\n        if (load === 1) {\n            this.values[address] = _in\n        }\n    }\n\n    reCompute() {\n        const address = this.inputPins[2].get()\n        this.outputPins[0].set(this.values[address])\n    }\n\n    clockDown() {\n        this.reCompute()\n    }\n}\n\nexport class Keyboard extends BuiltInGate {\n    key: number\n\n    constructor(inputPins: Node[], outputPins: Node[], gateClass: GateClass) {\n        super(inputPins, outputPins, gateClass)\n        this.key = -1\n    }\n}\n\nexport class ROM32K extends BuiltInGate {\n    static SIZE = 32768\n\n    values: Uint16Array\n\n    constructor(inputPins: Node[], outputPins: Node[], gateClass: GateClass) {\n        super(inputPins, outputPins, gateClass)\n        this.values = new Uint16Array(ROM32K.SIZE)\n    }\n\n    reCompute() {\n        const address = this.inputPins[0].get()\n        this.outputPins[0].set(this.values[address])\n    }\n}\n\nconst gates = { Screen, Keyboard, ROM32K }\nexport default gates\n","import { BuiltInGate } from \"../builtin-gate\"\nimport { GateClass } from \"../gateclass\"\nimport { Node } from \"../node\"\n\nimport logic from \"./logic\"\nimport arithmetic from \"./arithmetic\"\nimport memory from \"./memory\"\nimport computer from \"./computer\"\n\nexport class Nand extends BuiltInGate {\n    reCompute() {\n        const a = this.inputPins[0].get()\n        const b = this.inputPins[1].get()\n        this.outputPins[0].set(0x1 - (a & b))\n    }\n}\n\nexport class DFF extends BuiltInGate {\n    state: number\n\n    constructor(inputPins: Node[], outputPins: Node[], gateClass: GateClass) {\n        super(inputPins, outputPins, gateClass)\n        this.state = 0\n    }\n\n    clockUp() {\n        this.state = this.inputPins[0].get()\n    }\n\n    clockDown() {\n        this.outputPins[0].set(this.state)\n    }\n}\n\nexport type BuiltInDef = { hdl: string, gate: typeof BuiltInGate }\nexport type BuiltIns = { [_: string]: BuiltInDef }\n\nexport const builtins: BuiltIns = {\n    // GIVEN\n    Nand: {\n        hdl: `CHIP Nand { IN  a, b; OUT out; BUILTIN Nand; }`,\n        gate: Nand\n    },\n    DFF: {\n        hdl: `CHIP DFF { IN  in; OUT out; BUILTIN DFF; CLOCKED in; }`,\n        gate: DFF\n    },\n    // LOGIC\n    Not: {\n        hdl: `CHIP Not { IN  in; OUT out; BUILTIN Not; } `,\n        gate: logic.Not   \n    },\n    Not16: {\n      hdl: `CHIP Not16 { IN  in[16]; OUT out[16]; BUILTIN Not16; }`,\n      gate: logic.Not16\n    },\n    And: {\n      hdl: `CHIP And { IN  a, b; OUT out; BUILTIN And; } `,\n      gate: logic.And\n    },\n    And16: {\n      hdl: `CHIP And16 { IN  a[16], b[16]; OUT out[16]; BUILTIN And; }`,\n      gate: logic.And\n    },\n    Or: {\n      hdl: `CHIP Or { IN  a, b; OUT out; BUILTIN Or; }`,\n      gate: logic.Or\n    },\n    Or16: {\n      hdl: `CHIP Or16 { IN  a[16], b[16]; OUT out[16]; BUILTIN Or; }`,\n      gate: logic.Or\n    },\n    Xor: {\n      hdl: `CHIP Xor { IN  a, b; OUT out; BUILTIN Xor; }`,\n      gate: logic.Xor\n    },\n    Mux: {\n      hdl: `CHIP Mux { IN  a, b, sel; OUT out; BUILTIN Mux;}`,\n      gate: logic.Mux\n    },\n    Mux16: {\n      hdl: `CHIP Mux16 { IN  a[16], b[16], sel; OUT out[16]; BUILTIN Mux; }`,\n      gate: logic.Mux\n    },\n    Mux4Way16: {\n      hdl: ` CHIP Mux4Way16 { IN a[16], b[16], c[16], d[16], sel[2]; OUT out[16]; BUILTIN Mux4Way16; }`,\n      gate: logic.Mux4Way16\n    },\n    Mux8Way16: {\n      hdl: `CHIP Mux8Way16 { IN  a[16], b[16], c[16], d[16], e[16], f[16], g[16], h[16], sel[3]; OUT out[16]; BUILTIN Mux8Way16; }`,\n      gate: logic.Mux8Way16\n    },\n    DMux: {\n      hdl: `CHIP DMux { IN  in, sel; OUT a, b; BUILTIN DMux; }`,\n      gate: logic.DMux\n    },\n    DMux4Way: {\n      hdl: `CHIP DMux4Way { IN  in, sel[2]; OUT a, b, c, d; BUILTIN DMux4Way; }`,\n      gate: logic.DMux4Way\n    },\n    DMux8Way: {\n      hdl: `CHIP DMux8Way { IN  in, sel[3]; OUT a, b, c, d, e, f, g, h; BUILTIN DMux8Way; }`,\n      gate: logic.DMux8Way\n    },\n    Or8Way: {\n      hdl: `CHIP Or8Way { IN  in[8]; OUT out; BUILTIN Or8Way; }`,\n      gate: logic.Or8Way\n    },\n    //\n    // ARITHMETIC\n    //\n    HalfAdder: {\n      hdl: `CHIP HalfAdder { IN  a, b; OUT sum, carry; BUILTIN HalfAdder; }`,\n      gate: arithmetic.HalfAdder\n    },\n    FullAdder: {\n      hdl: `CHIP FullAdder { IN  a, b, c; OUT sum, carry; BUILTIN FullAdder; }`,\n      gate: arithmetic.FullAdder\n    },\n    Add16: {\n      hdl: `CHIP Add16 { IN  a[16], b[16]; OUT out[16]; BUILTIN Add16; }`,\n      gate: arithmetic.Add16\n    },\n    Inc16: {\n      hdl: `CHIP Inc16 { IN  in[16]; OUT out[16]; BUILTIN Inc16; }`,\n      gate: arithmetic.Inc16\n    },\n    ALU: {\n      hdl: `CHIP ALU { IN x[16], y[16], zx, nx, zy, ny, f, no; OUT out[16], zr, ng; BUILTIN ALU; }`,\n      gate: arithmetic.ALU\n    },\n    //\n    // MEMORY\n    //\n    Bit: {\n        hdl: `CHIP Bit { IN  in, load; OUT out; BUILTIN Bit; CLOCKED in, load; }`,\n        gate: memory.Bit\n    },\n    Register: {\n        hdl: `CHIP Register { IN  in[16], load; OUT out[16]; BUILTIN Register; CLOCKED in, load; }`,\n        gate: memory.Register\n    },\n    PC: {\n        hdl: `CHIP PC { IN  in[16], load, inc, reset; OUT out[16]; BUILTIN PC; CLOCKED in, load, inc, reset; }`,\n        gate: memory.PC\n    },\n    RAM8: {\n        hdl: `CHIP RAM8 { IN  in[16], load, address[3]; OUT out[16]; BUILTIN RAM8; CLOCKED in, load; }`,\n        gate: memory.RAM8\n    },\n    RAM64: {\n        hdl: `CHIP RAM64 { IN in[16], load, address[6]; OUT out[16]; BUILTIN RAM64; CLOCKED in, load; }`,\n        gate: memory.RAM64\n    },\n    RAM512: {\n        hdl: `CHIP RAM512 { IN  in[16], load, address[9]; OUT out[16]; BUILTIN RAM512; CLOCKED in, load; }`,\n        gate: memory.RAM512\n    },\n    RAM4K: {\n        hdl: `CHIP RAM4K { IN  in[16], load, address[12]; OUT out[16]; BUILTIN RAM4K; CLOCKED in, load; }`,\n        gate: memory.RAM4K\n    },\n    RAM16K: {\n        hdl: `CHIP RAM16K { IN  in[16], load, address[14]; OUT out[16]; BUILTIN RAM16K; CLOCKED in, load; }`,\n        gate: memory.RAM16K\n    },\n    //\n    // COMPUTER\n    //\n    Screen: {\n        hdl: `CHIP Screen { IN in[16], load, address[13]; OUT out[16]; BUILTIN Screen; CLOCKED in, load; }`,\n        gate: computer.Screen\n    },\n    Keyboard: {\n        hdl: `CHIP Keyboard { OUT out[16]; BUILTIN Keyboard; }`,\n        gate: computer.Keyboard\n    },\n    ROM32K: {\n        hdl: `CHIP ROM32K { IN  address[15]; OUT out[16]; BUILTIN ROM32K; }`,\n        gate: computer.ROM32K\n    },\n}\n\n","export function toBinaryString(node: Node): string {\n    return node.get().toString(2).padStart(16, \"0\")\n}\n\nexport class Node {\n    value: Uint16Array\n\n    connections: Set<Node> | null = null\n\n    constructor() {\n        this.value = new Uint16Array(1)\n    }\n\n    get() {\n      return this.value[0]\n    }\n\n    set(value: number) {\n        if (value === this.value[0]) return\n        this.value[0] = value\n        for (let connection of this.connections ?? [])\n            connection.set(this.get())\n    }\n\n    connect(node: Node) {\n        if (!this.connections) this.connections = new Set()\n        this.connections.add(node)\n    }\n\n    disconnect(node: Node) {\n        if (this.connections) this.connections.delete(node)\n    }\n}\n\nexport class SubNode extends Node {\n  mask: number\n  shiftRight: number\n\n  constructor([low, high]: SubBus) {\n    super()\n    this.mask = getMask(low, high)\n    this.shiftRight = low\n  }\n\n  set(value: number) {\n    super.set(value)\n  }\n\n  get(): number {\n    return (this.value[0] & this.mask) >>> this.shiftRight\n  }\n}\n\nexport type SubBus = [low: number, high: number]\n\nexport class SubBusListeningAdapter extends Node {\n  target: Node\n  mask: number\n  shiftLeft: number\n\n  constructor(node: Node, [low, high]: SubBus) {\n    super()\n    this.target = node\n    this.shiftLeft = low\n    this.mask = getMask(low, high)\n  }\n\n  get(): number {\n    return this.target.get()\n  }\n\n  set(value: number) {\n    const masked1 = this.target.get() & ~this.mask\n    const masked2 = (value << this.shiftLeft) & this.mask\n    this.target.set(masked1 | masked2)\n  }\n}\n\n// A helper array of powers of two\nexport const POWERS_OF_2 = [1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768]\n\nexport function getMask(low: number, high: number): number {\n  let mask = 0\n  let bitHolder = POWERS_OF_2[low]\n  for (let i=low; i<=high; i++) {\n    mask |= bitHolder\n    bitHolder = (bitHolder << 1)\n  }\n  return mask\n}\n","import { readPinsInfo } from \".\"\nimport { HDLParser } from \"../hdl/parser\"\nimport { TokenType } from \"../hdl/tokenizer\"\nimport { BuiltInGate } from \"./builtin-gate\"\nimport { builtins } from \"./builtins\"\nimport { Gate } from \"./gate\"\nimport { GateClass, PinInfo } from \"./gateclass\"\nimport { Node } from \"./node\"\n\nexport class BuiltInGateClass extends GateClass {\n  tsClassName: typeof BuiltInGate\n\n  constructor(name: string, parser: HDLParser, inputPinsInfo: PinInfo[], outputPinsInfo: PinInfo[]) {\n    super(name, inputPinsInfo, outputPinsInfo)\n    // read typescript class name\n    parser.expectPeek(TokenType.IDENTIFIER, \"Missing typescript class name\")\n    // TODO: support more than NAND\n    switch (name) {\n      // CH1\n      case \"Nand\": this.tsClassName = builtins.Nand.gate; break\n      case \"Not\": this.tsClassName = builtins.Not.gate; break\n      case \"Not16\": this.tsClassName = builtins.Not16.gate; break\n      case \"And\": this.tsClassName = builtins.And.gate; break\n      case \"And16\": this.tsClassName = builtins.And16.gate; break\n      case \"Or\": this.tsClassName = builtins.Or.gate; break\n      case \"Or16\": this.tsClassName = builtins.Or16.gate; break\n      case \"Xor\": this.tsClassName = builtins.Xor.gate; break\n      case \"Mux\": this.tsClassName = builtins.Mux.gate; break\n      case \"Mux16\": this.tsClassName = builtins.Mux16.gate; break\n      case \"Mux4Way16\": this.tsClassName = builtins.Mux4Way16.gate; break\n      case \"Mux8Way16\": this.tsClassName = builtins.Mux8Way16.gate; break\n      case \"DMux\": this.tsClassName = builtins.DMux.gate; break\n      case \"DMux4Way\": this.tsClassName = builtins.DMux4Way.gate; break\n      case \"DMux8Way\": this.tsClassName = builtins.DMux8Way.gate; break\n      case \"Or8Way\": this.tsClassName = builtins.Or8Way.gate; break\n      // CH2\n      case \"HalfAdder\": this.tsClassName = builtins.HalfAdder.gate; break\n      case \"FullAdder\": this.tsClassName = builtins.FullAdder.gate; break\n      case \"Add16\": this.tsClassName = builtins.Add16.gate; break\n      case \"Inc16\": this.tsClassName = builtins.Inc16.gate; break\n      case \"ALU\": this.tsClassName = builtins.ALU.gate; break\n      // CH3\n      case \"DFF\": this.tsClassName = builtins.DFF.gate; break // REQUIRED BUILTIN\n      case \"Bit\": this.tsClassName = builtins.Bit.gate; break\n      case \"Register\": this.tsClassName = builtins.Register.gate; break\n      case \"PC\": this.tsClassName = builtins.PC.gate; break\n      case \"RAM8\": this.tsClassName = builtins.RAM8.gate; break\n      case \"RAM64\": this.tsClassName = builtins.RAM64.gate; break\n      case \"RAM512\": this.tsClassName = builtins.RAM512.gate; break\n      case \"RAM4K\": this.tsClassName = builtins.RAM4K.gate; break\n      case \"RAM16K\": this.tsClassName = builtins.RAM16K.gate; break\n      // CH5\n      case \"Screen\": this.tsClassName = builtins.Screen.gate; break\n      case \"Keyboard\": this.tsClassName = builtins.Keyboard.gate; break\n      case \"ROM32K\": this.tsClassName = builtins.ROM32K.gate; break\n      default: parser.fail(`Unexpected gate class name ${name}`)\n    }\n    // read ';' symbol\n    parser.expectPeek(TokenType.SEMICOLON, \"Missing ';'\")\n\n    this.isInputClocked = new Array(inputPinsInfo.length)\n    this.isOutputClocked = new Array(outputPinsInfo.length)\n\n    if (parser.peekTokenIs(TokenType.CLOCKED)) {\n        this.isClocked = true\n        const clockedPins = readPinsInfo(parser)\n        for (let i=0; i<clockedPins.length; i++) {\n            let inputFound = false\n            let outputFound = false\n            for (let j=0; j<this.isInputClocked.length && !inputFound; j++) {\n                if (!this.isInputClocked[j]) {\n                    inputFound = inputPinsInfo[j].name === clockedPins[i].name\n                    this.isInputClocked[j] = inputFound\n                }\n            }\n            if (!inputFound) {\n                for (let j=0; j<this.isOutputClocked.length && !outputFound; j++) {\n                    if (!this.isOutputClocked[j]) {\n                        outputFound = outputPinsInfo[j].name === clockedPins[j].name\n                        this.isOutputClocked[j] = outputFound\n                    }\n                }\n            }\n        }\n    }\n\n    // read '}' symbol\n    parser.expectPeek(TokenType.RBRACE, \"Missing '}'\")\n  }\n\n  newInstance(): Gate {\n    const inputNodes: Node[] = this.inputPinsInfo.map((_) => new Node())\n    const outputNodes: Node[] = this.outputPinsInfo.map((_) => new Node())\n    return new this.tsClassName(inputNodes, outputNodes, this)\n  }\n}\n","import { SubBus } from \"./node\"\n\nexport enum ConnectionType {\n    FROM_INPUT = \"FROM_INPUT\",\n    TO_OUTPUT = \"TO_OUTPUT\",\n    FROM_INTERNAL = \"FROM_INTERNAL\",\n    TO_INTERNAL = \"TO_INTERNAL\",\n    FROM_TRUE = \"FROM_TRUE\",\n    FROM_FALSE = \"FROM_FALSE\",\n    INVALID = \"INVALID\"\n}\n\nexport type Connection = {\n    type: ConnectionType\n    gatePinNumber: number\n    partNumber: number\n    partPinName: string\n    gateSubBus: SubBus | null\n    partSubBus: SubBus | null\n}\n","import { Gate } from \"./gate\"\nimport { GateClass, PinType } from \"./gateclass\"\nimport { Node } from \"./node\"\n\nexport class CompositeGate extends Gate {\n  parts: Gate[]\n  internalPins: Node[]\n\n  constructor(inputPins: Node[], outputPins: Node[], internalPins: Node[], gateClass: GateClass, parts: Gate[]) {\n    super(inputPins, outputPins, gateClass)\n    this.internalPins = internalPins\n    this.parts = parts\n  }\n\n  reCompute() {\n    for (let part of this.parts) part.eval()\n  }\n\n  clockUp() {\n    if (this.gateClass.isClocked) {\n      for (const part of this.parts) {\n        part.tock()\n      }\n    }\n  }\n\n  clockDown() {\n    if (this.gateClass.isClocked)\n      for (const part of this.parts) part.tick()\n  }\n\n  getNode(name: string): Node | null {\n    const result = super.getNode(name)\n    if (!result) {\n      const type = this.gateClass.getPinType(name)\n      const index = this.gateClass.getPinNumber(name)\n      if (type === PinType.INTERNAL) return this.internalPins[index]\n    }\n    return result\n  }\n}\n","import { Connection, ConnectionType } from \"./connection\"\nimport { Gate } from \"./gate\"\nimport { GateClass, PinInfo, PinType } from \"./gateclass\"\nimport { Node, SubNode, SubBus, SubBusListeningAdapter } from \"./node\"\nimport { HDLParser } from \"./../hdl/parser\"\nimport { TokenType } from \"./../hdl/tokenizer\"\nimport { CompositeGate } from \"./composite-gate\"\nimport { getGateClass } from \".\"\n\nexport type Name = string\nexport type Content = string\nexport type UserWorkspace = Map<string, string>\n\nexport class CompositeGateClass extends GateClass {\n  partsList: GateClass[]\n  internalPinsInfo: PinInfo[]\n  connections: Set<Connection>\n\n  constructor(name: string,\n              parser: HDLParser,\n              inputPinsInfo: PinInfo[],\n              outputPinsInfo: PinInfo[],\n              userDefinedParts: UserWorkspace) {\n    super(name, inputPinsInfo, outputPinsInfo)\n    this.partsList = []\n    this.internalPinsInfo = []\n    this.connections = new Set()\n    this.readParts(parser, userDefinedParts)\n  }\n\n  newInstance(): Gate {\n    const parts: Gate[] = this.partsList.map((partClass) => partClass.newInstance())\n\n    const inputNodes = this.inputPinsInfo.map((_) => new Node())\n    const outputNodes = this.outputPinsInfo.map((_) => new Node())\n    const internalNodes = this.internalPinsInfo.map((_) => new Node())\n\n    const internalConnections = new Set<Connection>()\n\n    // First scan\n    let partNode: Node | null = null\n    let gateSubBus: SubBus | null = null\n    let partSubBus: SubBus | null = null\n    for (const connection of this.connections) {\n      partNode = parts[connection.partNumber].getNode(connection.partPinName)\n      if (!partNode) continue\n      gateSubBus = connection.gateSubBus\n      partSubBus = connection.partSubBus\n\n      switch (connection.type) {\n        case ConnectionType.FROM_INPUT:\n          this.connectGateToPart(inputNodes[connection.gatePinNumber], gateSubBus, partNode, partSubBus)\n          break\n        case ConnectionType.TO_OUTPUT:\n          this.connectGateToPart(partNode, partSubBus, outputNodes[connection.gatePinNumber], gateSubBus)\n          break\n        case ConnectionType.TO_INTERNAL:\n          const target = partSubBus === null ? new Node() : new SubNode(partSubBus)\n          partNode.connect(target)\n          internalNodes[connection.gatePinNumber] = target\n          break\n        case ConnectionType.FROM_INTERNAL:\n        case ConnectionType.FROM_TRUE:\n        case ConnectionType.FROM_FALSE:\n          internalConnections.add(connection)\n          break\n      }\n    }\n\n    // Second scan\n    let subNode: SubNode\n    for (const connection of internalConnections) {\n      partNode = parts[connection.partNumber].getNode(connection.partPinName)\n      if (!partNode) continue\n      gateSubBus = connection.gateSubBus\n      partSubBus = connection.partSubBus\n\n      switch (connection.type) {\n        case ConnectionType.FROM_INTERNAL:\n          const source = internalNodes[connection.gatePinNumber]\n          if (!partSubBus) {\n            source.connect(partNode)\n          } else {\n            const node = new SubBusListeningAdapter(partNode, partSubBus)\n            source.connect(node)\n          }\n          break\n        case ConnectionType.FROM_TRUE:\n          if (!gateSubBus) HDLParser.fail(\"gateSubBus is null\")\n          subNode = new SubNode(gateSubBus)\n          subNode.set(1)\n          if (!partSubBus) {\n            partNode.set(subNode.get())\n          } else {\n            const node = new SubBusListeningAdapter(partNode, partSubBus)\n            node.set(subNode.get())\n          }\n          break\n        case ConnectionType.FROM_FALSE:\n          if (!gateSubBus) HDLParser.fail(\"gateSubBus is null\")\n          subNode = new SubNode(gateSubBus)\n          subNode.set(0)\n          if (!partSubBus) {\n            partNode.set(subNode.get())\n          } else {\n            const node = new SubBusListeningAdapter(partNode, partSubBus)\n            node.set(subNode.get())\n          }\n          break\n      }\n    }\n\n    return new CompositeGate(inputNodes, outputNodes, internalNodes, this, parts)\n  }\n\n  connectGateToPart(sourceNode: Node, sourceSubBus: SubBus | null, targetNode: Node, targetSubBus: SubBus | null) {\n    let target = targetNode\n    if (targetSubBus) {\n      target = new SubBusListeningAdapter(target, targetSubBus)\n    }\n    if (!sourceSubBus) {\n      sourceNode.connect(target)\n    } else {\n      const subNode = new SubNode(sourceSubBus)\n      sourceNode.connect(subNode)\n      subNode.connect(target)\n    }\n  }\n\n  readParts(parser: HDLParser, userDefinedParts: UserWorkspace) {\n    let endOfParts = false\n    while (parser.hasMoreTokens() && !endOfParts) {\n      // check if end of hdl\n      if (parser.peekTokenIs(TokenType.RBRACE)) {\n        // read }\n        parser.advance()\n        endOfParts = true\n      } else {\n        // read partName\n        parser.expectPeek(TokenType.IDENTIFIER, \"A GateClass name is expected\")\n        const partName = parser.token.literal ?? ''\n        // make part\n        const gateClass = getGateClass(partName, userDefinedParts)\n        const partNumber = this.partsList.length\n        this.partsList.push(gateClass)\n        this.isClocked = this.isClocked || gateClass.isClocked\n        // read (\n        parser.expectPeek(TokenType.LPAREN, \"Missing '('\")\n        // read pins\n        this.readPinNames(parser, partName, partNumber)\n        // read ;\n        parser.expectPeek(TokenType.SEMICOLON, \"Missing ';'\")\n      }\n    }\n    if (!endOfParts) parser.fail(\"Missing '}'\")\n    // read EOF\n    parser.expectPeek(TokenType.EOF, \"Expected EOF after '}'\")\n  }\n\n  readSubBus(parser: HDLParser): SubBus {\n    // read low\n    parser.expectPeek(TokenType.INT, \"Missing bus\")\n    const low = parseInt(parser.token.literal ?? \"\")\n    let high = low\n    if (parser.peekTokenIs(TokenType.DOT)) {\n      // read .\n      parser.advance()\n      // read .\n      parser.expectPeek(TokenType.DOT, \"Expected '..'\")\n      // read high\n      parser.expectPeek(TokenType.INT, \"Expected high sub bus\")\n      high = parseInt(parser.token.literal ?? \"\")\n    }\n    return [low, high]\n  }\n\n  readPinNames(parser: HDLParser, partName: string, partNumber: number): void | never {\n    let endOfPins = false\n    // read pin names\n    while (parser.hasMoreTokens() && !endOfPins) {\n      // read left pin name\n      parser.expectPeek(TokenType.IDENTIFIER, \"A pin name is expected\")\n      const leftName = parser.token.literal ?? \"\"\n      // read left sub bus\n      let leftSubBus: SubBus | null = null\n      if (parser.peekTokenIs(TokenType.LBRACKET)) {\n        // read [\n        parser.advance()\n        leftSubBus = this.readSubBus(parser)\n        // read ]\n        parser.expectPeek(TokenType.RBRACKET, \"Missing ']'\")\n      }\n\n      // read =\n      parser.expectPeek(TokenType.EQUAL, \"Missing '='\")\n      // read right pin name\n      const rightPinPossibilities = [TokenType.IDENTIFIER, TokenType.TRUE, TokenType.FALSE]\n      parser.expectPeekOneOf(rightPinPossibilities, \"A pin name, true, or false is expected\")\n      const rightName = parser.token.literal ?? \"\"\n      // read right sub bus\n      let rightSubBus: SubBus | null = null\n      if (parser.peekTokenIs(TokenType.LBRACKET)) {\n        // read [\n        parser.advance()\n        rightSubBus = this.readSubBus(parser)\n        // read ]\n        parser.expectPeek(TokenType.RBRACKET, \"Missing ']'\")\n      }\n\n      // make connection\n      this.addConnection(parser, partName, partNumber, leftName, rightName, rightSubBus, leftSubBus)\n\n      // read , or )\n      if (parser.peekTokenIs(TokenType.RPAREN)) {\n        endOfPins = true\n      } else if (!parser.peekTokenIs(TokenType.COMMA)) {\n        parser.fail(\"Missing ',' or ')'\")\n      }\n      parser.advance()\n    }\n\n    if (!endOfPins) parser.fail(\"Unexpected EOF\")\n  }\n\n  getPinInfo(type: PinType, number: number): PinInfo | null {\n    if (type === PinType.INTERNAL && number < this.internalPinsInfo.length) {\n      return this.internalPinsInfo[number]\n    } else {\n      return super.getPinInfo(type, number)\n    }\n  }\n\n  addConnection(parser: HDLParser, partName: string, partNumber: number, leftName: string, rightName: string, rightSubBus: SubBus | null, leftSubBus: SubBus | null): void | never {\n    const partGateClass = this.partsList[partNumber]\n\n    const leftType = partGateClass.getPinType(leftName)\n    if (leftType === PinType.UNKNOWN) parser.fail(`${leftName} is not a pin in ${partName}`)\n    const leftNumber = partGateClass.getPinNumber(leftName)\n    const leftPinInfo = partGateClass.getPinInfo(leftType, leftNumber)\n    const leftWidth = (leftSubBus ? leftSubBus[1] - leftSubBus[0] + 1 : leftPinInfo?.width) ?? 0\n\n    let rightType = PinType.UNKNOWN\n    let rightNumber: number = 0\n    let rightPinInfo: PinInfo | null\n\n    let selfFittingWidth = false\n\n    let connectionType: ConnectionType = ConnectionType.INVALID\n\n    if (rightName === TokenType.TRUE) {\n      rightPinInfo = { name: rightName, width: 16 }\n      connectionType = ConnectionType.FROM_TRUE\n      selfFittingWidth = true\n    } else if (rightName === TokenType.FALSE) {\n      rightPinInfo = { name: rightName, width: 16 }\n      connectionType = ConnectionType.FROM_TRUE\n      selfFittingWidth = true\n    } else {\n      rightType = this.getPinType(rightName)\n      if (rightType === PinType.UNKNOWN) {\n        rightType = PinType.INTERNAL\n        rightPinInfo = { name: rightName, width: leftWidth }\n        rightNumber = this.internalPinsInfo.length\n        this.internalPinsInfo.push(rightPinInfo)\n        this.registerPin(rightPinInfo, PinType.INTERNAL, rightNumber)\n      } else {\n        rightNumber = this.getPinNumber(rightName)\n        rightPinInfo = this.getPinInfo(rightType, rightNumber)\n      }\n    }\n\n    let rightWidth = (rightSubBus ? rightSubBus[1] - rightSubBus[0] + 1 : rightPinInfo?.width) ?? 1\n    if (selfFittingWidth) {\n      rightWidth = leftWidth\n      rightSubBus = [0, rightWidth-1]\n    }\n\n    // check that leftWidth and rightWidth are the same\n    if (leftWidth !== rightWidth)\n      parser.fail(`${leftName}(${leftWidth}) and ${rightName}(${rightWidth}) have different bus widths`)\n\n\n    switch (leftType) {\n      case PinType.INPUT:\n        switch (rightType) {\n          case PinType.INPUT:\n            connectionType = ConnectionType.FROM_INPUT\n            break\n          case PinType.INTERNAL:\n            connectionType = ConnectionType.FROM_INTERNAL\n            break\n          case PinType.OUTPUT:\n            parser.fail(\"Can't connect gate's output pin to part\")\n        }\n        break\n      case PinType.OUTPUT:\n        switch (rightType) {\n          case PinType.OUTPUT:\n            connectionType = ConnectionType.TO_OUTPUT\n            break\n          case PinType.INTERNAL:\n            connectionType = ConnectionType.TO_INTERNAL\n            break\n          case PinType.INPUT:\n            parser.fail(\"Can't connect part's output pin to gate's input pin\")\n        }\n        break\n    }\n\n    this.connections.add({\n      type: connectionType,\n      gatePinNumber: rightNumber,\n      partNumber,\n      partPinName: leftName,\n      gateSubBus: rightSubBus,\n      partSubBus: leftSubBus,\n    })\n  }\n}\n","import { HDLParser } from \"../hdl/parser\";\nimport { HDLTokenizer, TokenType } from \"../hdl/tokenizer\";\nimport { BuiltInGateClass } from \"./builtin-gateclass\";\nimport { builtins } from \"./builtins\";\nimport { CompositeGateClass, UserWorkspace } from \"./composite-gateclass\";\nimport { GateClass, PinInfo } from \"./gateclass\";\n\nexport function getGateClass(name: string, userDefinedParts: UserWorkspace): GateClass | never {\n  const hdlFileName = `${name}.hdl`\n  if (userDefinedParts.has(hdlFileName)) {\n    const hdl = userDefinedParts.get(hdlFileName) ?? \"\"\n    return getGateClassHDL(hdl, userDefinedParts)\n  } else {\n    return getGateClassBuiltIn(name, userDefinedParts)\n  }\n}\n\nexport function getGateClassHDL(hdl: string, userDefinedParts: UserWorkspace): GateClass | never {\n    const tokenizer = new HDLTokenizer(hdl)\n    const parser = new HDLParser(tokenizer)\n    return readHDL(parser, userDefinedParts)\n}\n\nexport function getGateClassBuiltIn(name: string, userDefinedParts: UserWorkspace): GateClass | never {\n    let hdl: string\n    switch (name) {\n        // CH1\n        case \"Nand\": hdl = builtins.Nand.hdl; break\n        case \"Not\": hdl = builtins.Not.hdl; break\n        case \"Not16\": hdl = builtins.Not16.hdl; break\n        case \"And\": hdl = builtins.And.hdl; break\n        case \"And16\": hdl = builtins.And16.hdl; break\n        case \"Or\": hdl = builtins.Or.hdl; break\n        case \"Or16\": hdl = builtins.Or16.hdl; break\n        case \"Xor\": hdl = builtins.Xor.hdl; break\n        case \"Mux\": hdl = builtins.Mux.hdl; break\n        case \"Mux16\": hdl = builtins.Mux16.hdl; break\n        case \"Mux4Way16\": hdl = builtins.Mux4Way16.hdl; break\n        case \"Mux8Way16\": hdl = builtins.Mux8Way16.hdl; break\n        case \"DMux\": hdl = builtins.DMux.hdl; break\n        case \"DMux4Way\": hdl = builtins.DMux4Way.hdl; break\n        case \"DMux8Way\": hdl = builtins.DMux8Way.hdl; break\n        case \"Or8Way\": hdl = builtins.Or8Way.hdl; break\n        // CH2\n        case \"HalfAdder\": hdl = builtins.HalfAdder.hdl; break\n        case \"FullAdder\": hdl = builtins.FullAdder.hdl; break\n        case \"Add16\": hdl = builtins.Add16.hdl; break\n        case \"Inc16\": hdl = builtins.Inc16.hdl; break\n        case \"ALU\": hdl = builtins.ALU.hdl; break\n        // CH3\n        case \"DFF\": hdl = builtins.DFF.hdl; break\n        case \"Bit\": hdl = builtins.Bit.hdl; break\n        case \"Register\": hdl = builtins.Register.hdl; break\n        case \"PC\": hdl = builtins.PC.hdl; break\n        case \"RAM8\": hdl = builtins.RAM8.hdl; break\n        case \"RAM64\": hdl = builtins.RAM64.hdl; break\n        case \"RAM512\": hdl = builtins.RAM512.hdl; break\n        case \"RAM4K\": hdl = builtins.RAM4K.hdl; break\n        case \"RAM16K\": hdl = builtins.RAM16K.hdl; break\n        // CH5\n        case \"Screen\": hdl = builtins.Screen.hdl; break\n        case \"Keyboard\": hdl = builtins.Keyboard.hdl; break\n        case \"ROM32K\": hdl = builtins.ROM32K.hdl; break\n        default: HDLParser.fail(`Invalid builtin gate class name: ${name}`)\n    }\n    return getGateClassHDL(hdl, userDefinedParts)\n}\n\nexport function readHDL(parser: HDLParser, userDefinedParts: UserWorkspace): GateClass | never {\n  // read CHIP keyword\n  parser.expectCurrent(TokenType.CHIP, `Missing 'CHIP' keyword`)\n  // read gate name\n  parser.expectPeek(TokenType.IDENTIFIER, \"Missing chip name\")\n  const gateName = parser.token.literal ?? \"\"\n  // read {\n  parser.expectPeek(TokenType.LBRACE, \"Missing '{'\")\n  // read IN keyword\n  const inputPinsInfo = parser.peekTokenIs(TokenType.IN) ? readPinsInfo(parser) : []\n  // read OUT keyword\n  const outputPinsInfo = parser.peekTokenIs(TokenType.OUT) ? readPinsInfo(parser) : []\n\n  // read BUILTIN or PARTS\n  parser.advance()\n  if (parser.tokenIs(TokenType.BUILTIN)) {\n    return new BuiltInGateClass(gateName, parser, inputPinsInfo, outputPinsInfo)\n  } else if (parser.tokenIs(TokenType.PARTS)) {\n    // read :\n    parser.expectPeek(TokenType.COLON, \"Missing ':'\")\n    return new CompositeGateClass(gateName, parser, inputPinsInfo, outputPinsInfo, userDefinedParts)\n  } else {\n    return parser.fail(\"'PARTS' or 'BUILTIN' keyword expected\")\n  }\n}\n\nexport function readPinsInfo(parser: HDLParser): PinInfo[] {\n  let pinInfos: PinInfo[] = []\n  let exit = false\n\n  parser.advance()\n  while (parser.hasMoreTokens() && !exit) {\n    // check ';' symbol\n    if (parser.tokenIs(TokenType.SEMICOLON)) {\n      exit = true\n    } else {\n      // read pin name\n      parser.expectPeek(TokenType.IDENTIFIER, `Missing pin name, found ${parser.peek.literal}`)\n      const pinName = parser.token.literal ?? \"\"\n      // read width or separator\n      let pinWidth = 1\n      if (parser.peekTokenIs(TokenType.LBRACKET)) {\n        // read [\n        parser.advance()\n        // read width\n        parser.expectPeek(TokenType.INT, \"Missing width\")\n        pinWidth = parseInt(parser.token.literal ?? \"\")\n        // read ]\n        parser.expectPeek(TokenType.RBRACKET, \"Missing ']'\")\n      }\n\n      pinInfos.push({ name: pinName, width: pinWidth })\n      // check separator\n      parser.expectPeekOneOf([TokenType.COMMA, TokenType.SEMICOLON], \"Missing ',' or ';'\")\n    }\n  }\n\n  if (!exit) parser.fail(\"Unexpected EOF\")\n\n  return pinInfos\n}\n\n\n","import { getGateClass } from \"../gates\"\nimport { UserWorkspace } from \"../gates/composite-gateclass\"\nimport { Gate } from \"../gates/gate\"\n\nexport class HardwareSimulator {\n    gate: Gate | null\n    clockUp: boolean\n\n    constructor() {\n        this.gate = null\n        this.clockUp = false\n    }\n\n    loadGate(name: string, userDefinedParts: UserWorkspace) {\n        this.gate = getGateClass(name, userDefinedParts).newInstance()\n    }\n\n    step() {\n        if (this.clockUp) {\n            this.performTock()\n        } else {\n            this.performTick()\n        }\n    }\n\n    performTock() {\n        if (this.gate === null) return\n\n        this.gate.tock()\n        this.clockUp = false\n    }\n\n    performTick() {\n        if (this.gate === null) return\n\n        this.gate.tick()\n        this.clockUp = true\n    }\n\n    setInputPin(pinNumber: number, value: number) {\n        this.gate?.inputPins[pinNumber].set(value)\n    }\n}\n","export type TestScriptProps = {\n  script: string | null\n}\n\nexport function TestScript({ script }: TestScriptProps) {\n  return (<div className=\"testScript\"><pre>{script}</pre></div>)\n}\n","import React, { useCallback, useEffect, useRef, useState } from \"react\"\nimport { CompositeGate } from \"./../../gates/composite-gate\"\nimport { CompositeGateClass, UserWorkspace } from \"./../../gates/composite-gateclass\"\nimport { PinInfo, PinType } from \"./../../gates/gateclass\"\nimport { Actions } from \"./actions\"\nimport { HDLViewer } from \"./hdl-viewer\"\nimport { Pins } from \"./pins\"\nimport { StatusMessage } from \"./status-message\"\nimport { HardwareSimulator } from \"../../simulators/hardware-simulator\"\nimport { Gate } from \"../../gates/gate\"\nimport { TestScript } from \"./test-script\"\n\nexport type PinUpdate = {\n  value: string\n  number: number\n  type: PinType\n}\n\nexport type PinData = {\n  name: string\n  value: string\n}\n\nexport type AllPinData = {\n  input: PinData[],\n  output: PinData[],\n  internal: PinData[]\n}\n\nexport default function HardwareSimulatorUI() {\n  const [userWorkspace, setUserWorkspace] = useState<UserWorkspace | null>(null)\n  const [gateFilename, setGateFilename] = useState<string | null>(null)\n  const [testScript, setTestScript] = useState<string | null>(\"default.tst\")\n\n  const [pinData, setPinData] = useState<AllPinData>({ input: [], output: [], internal: [] })\n  const [status, setStatus] = useState<string | null>(null)\n\n  const [format, setFormat] = useState<string>(\"decimal\")\n\n  const simulator = useRef(new HardwareSimulator())\n\n  // update UI\n  const updatePinData = useCallback(() => {\n    const gate = simulator.current.gate\n    if (!gate) {\n      throw new Error(\"updatePinData: gate can not be null\")\n    }\n    const input = getPinData(gate, PinType.INPUT)\n    const output = getPinData(gate, PinType.OUTPUT)\n    const internal = getPinData(gate, PinType.INTERNAL)\n    setPinData({ input, output, internal })\n  }, [])\n\n  // parse hdl file contents into gate\n  useEffect(() => {\n    if (!gateFilename || !userWorkspace) { return }\n    if (!gateFilename.endsWith(\".hdl\")) { return }\n    const gateName = gateFilename.slice(0, -4)\n    try {\n      simulator.current.loadGate(gateName, userWorkspace)\n      updatePinData()\n      setStatus(\"Loaded successfully!\")\n      console.log(simulator.current.gate)\n    } catch (error) {\n      setStatus(`${error}`)\n    }\n  }, [gateFilename, userWorkspace, updatePinData])\n\n  // step forward one time unit\n  const singleStep = useCallback(() => {\n    simulator.current.step()\n    updatePinData()\n  }, [updatePinData])\n\n  // set input pin\n  const updateInputPin = useCallback(({ value, number, type }: PinUpdate) => {\n    // can only update input pins\n    if (type !== PinType.INPUT) { return }\n    simulator.current.setInputPin(number, parseInt(value) || 0)\n    updatePinData()\n  }, [updatePinData])\n\n  let hdl = \"No hdl file\"\n  if (userWorkspace && gateFilename) {\n    hdl = userWorkspace.get(gateFilename) ?? \"\"\n  }\n\n  userWorkspace?.set(\"default.tst\", \"repeat {\\n    tick,\\n    tock;\\n}\")\n  const displayScript = (testScript ? userWorkspace?.get(testScript) : null) ?? \"No test found\"\n\n  return (\n    <div id=\"hardwareSimulator\">\n      <div className=\"header\">\n        <h1>HardwareSimulator</h1>\n      </div>\n      <Actions\n        hdlFilename={gateFilename}\n        setHDLFileName={setGateFilename}\n        userWorkspace={userWorkspace}\n        setUserWorkspace={setUserWorkspace}\n        testScript={testScript}\n        setTestScript={setTestScript}\n        setFormat={setFormat}\n        singleStep={singleStep} />\n      <div className=\"container\">\n        <Pins title=\"Input Pins\" type={PinType.INPUT} pinData={pinData.input} updatePin={updateInputPin} format={format} />\n        <Pins title=\"Output Pins\" type={PinType.OUTPUT} pinData={pinData.output} updatePin={updateInputPin} format={format} />\n        <TestScript script={displayScript} />\n        <HDLViewer hdl={hdl} />\n        <Pins title=\"Internal Pins\" type={PinType.INTERNAL} pinData={pinData.internal} updatePin={updateInputPin} format={format} />\n      </div>\n      <StatusMessage status={status} />\n    </div>\n  )\n}\n\nexport function getPinData(gate: Gate, pinType: PinType): PinData[] | never {\n  let pinInfo: PinInfo[] = []\n  switch (pinType) {\n    case PinType.INPUT:\n      pinInfo = gate.gateClass.inputPinsInfo\n      return gate.inputPins.map((node, i) => ({name: pinInfo[i].name, value: node.value[0].toString()}))\n    case PinType.OUTPUT:\n      pinInfo = gate.gateClass.outputPinsInfo\n      return gate.outputPins.map((node, i) => ({name: pinInfo[i].name, value: node.value[0].toString()}))\n    case PinType.INTERNAL:\n      const compositeGate = gate as CompositeGate\n      if (!compositeGate) return []\n      const compositeClass = compositeGate.gateClass as CompositeGateClass\n      if (!compositeClass) return []\n      pinInfo = compositeClass.internalPinsInfo\n      return compositeGate.internalPins.map((node, i) => ({name: pinInfo[i].name, value: node.value[0].toString()}))\n    default:\n      throw new Error(`pinType is ${pinType}`)\n  }\n}\n","import React from 'react'\nimport './App.css'\nimport HardwareSimulatorUI from './hack/guis/hardware-simulator'\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <HardwareSimulatorUI />\n    </div>\n  )\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}